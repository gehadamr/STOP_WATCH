
STOP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002b0e  00002ba2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800080  00800080  00002bc2  2**0
                  ALLOC
  3 .stab         00002640  00000000  00000000  00002bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e6f  00000000  00000000  00005204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006073  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000061d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006362  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000083a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000094a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a42c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a5ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a86e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b0fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__vector_10>
      2c:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 98 13 	call	0x2730	; 0x2730 <main>
      8a:	0c 94 85 15 	jmp	0x2b0a	; 0x2b0a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidInit>:
#include"DIO_Interface.h"
#include"DIO_Configue.h"

/******************************/
// for  setting direction  of pins and it's intial values 
void DIO_voidInit(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	
	//SET DIRECTION ON DRRX 
   DIO_u8_DDRA_REG=CONC(DIO_u8_PA7_INTIAL_DIRECTION ,
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	80 83       	st	Z, r24
                        DIO_u8_PA2_INTIAL_DIRECTION ,
                        DIO_u8_PA1_INTIAL_DIRECTION ,
                        DIO_u8_PA0_INTIAL_DIRECTION );
	
	
   DIO_u8_DDRB_REG=CONC(DIO_u8_PB7_INTIAL_DIRECTION ,
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	83 ef       	ldi	r24, 0xF3	; 243
     cb4:	80 83       	st	Z, r24
                        DIO_u8_PB1_INTIAL_DIRECTION ,
                        DIO_u8_PB0_INTIAL_DIRECTION );
						
						
						
   DIO_u8_DDRC_REG=CONC(DIO_u8_PC7_INTIAL_DIRECTION ,
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f e0       	ldi	r24, 0x0F	; 15
     cbc:	80 83       	st	Z, r24
                        DIO_u8_PC3_INTIAL_DIRECTION ,
                        DIO_u8_PC2_INTIAL_DIRECTION ,
                        DIO_u8_PC1_INTIAL_DIRECTION ,
                        DIO_u8_PC0_INTIAL_DIRECTION );	

   DIO_u8_DDRD_REG=CONC(DIO_u8_PD7_INTIAL_DIRECTION ,
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8f e0       	ldi	r24, 0x0F	; 15
     cc4:	80 83       	st	Z, r24




//SET INIAL VALUE ON PORTX 
  DIO_u8_PORTA_REG=CONC(DIO_u8_PA7_INTIAL_VALUE ,
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1
                        DIO_u8_PA1_INTIAL_VALUE ,
                        DIO_u8_PA0_INTIAL_VALUE );
										 
										 
										  
  DIO_u8_PORTB_REG=CONC(DIO_u8_PB7_INTIAL_VALUE ,
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	8c e0       	ldi	r24, 0x0C	; 12
     cd2:	80 83       	st	Z, r24
                        DIO_u8_PB1_INTIAL_VALUE ,
                        DIO_u8_PB0_INTIAL_VALUE );
										 
										
										
  DIO_u8_PORTC_REG=CONC(DIO_u8_PC7_INTIAL_VALUE ,
     cd4:	e5 e3       	ldi	r30, 0x35	; 53
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	88 ef       	ldi	r24, 0xF8	; 248
     cda:	80 83       	st	Z, r24
                        DIO_u8_PC1_INTIAL_VALUE ,
                        DIO_u8_PC0_INTIAL_VALUE );	
										 
										 
										 
  DIO_u8_PORTD_REG=CONC(DIO_u8_PD7_INTIAL_VALUE ,
     cdc:	e2 e3       	ldi	r30, 0x32	; 50
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	8f ef       	ldi	r24, 0xFF	; 255
     ce2:	80 83       	st	Z, r24




						
}
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <DIO_u8SetPinDirection>:





u8 DIO_u8SetPinDirection(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8PinDirection){
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	2e 97       	sbiw	r28, 0x0e	; 14
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	8a 83       	std	Y+2, r24	; 0x02
     d00:	6b 83       	std	Y+3, r22	; 0x03
     d02:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=STD_TYPES_OK;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	89 83       	std	Y+1, r24	; 0x01
	
	/***check port and pin within range or not****/
	//because number is unsigned so (Copy_u8PortId>= DIO_u8_PORTA)&&(Copy_u8PinId>=DIO_u8_PIN0) doesnot required
	//check he give me two macros except output or input 
	if((Copy_u8PortId<=DIO_u8_PORTD)&&(Copy_u8PinId<=DIO_u8_PIN7)&&((Copy_u8PinDirection==DIO_u8_OUTPUT)||(Copy_u8PinDirection==DIO_u8_INPUT))){
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	84 30       	cpi	r24, 0x04	; 4
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <DIO_u8SetPinDirection+0x26>
     d0e:	0c c1       	rjmp	.+536    	; 0xf28 <DIO_u8SetPinDirection+0x23e>
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	88 30       	cpi	r24, 0x08	; 8
     d14:	08 f0       	brcs	.+2      	; 0xd18 <DIO_u8SetPinDirection+0x2e>
     d16:	08 c1       	rjmp	.+528    	; 0xf28 <DIO_u8SetPinDirection+0x23e>
     d18:	8c 81       	ldd	r24, Y+4	; 0x04
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	21 f0       	breq	.+8      	; 0xd26 <DIO_u8SetPinDirection+0x3c>
     d1e:	8c 81       	ldd	r24, Y+4	; 0x04
     d20:	88 23       	and	r24, r24
     d22:	09 f0       	breq	.+2      	; 0xd26 <DIO_u8SetPinDirection+0x3c>
     d24:	01 c1       	rjmp	.+514    	; 0xf28 <DIO_u8SetPinDirection+0x23e>
		
		switch(Copy_u8PortId){
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	3e 87       	std	Y+14, r19	; 0x0e
     d2e:	2d 87       	std	Y+13, r18	; 0x0d
     d30:	8d 85       	ldd	r24, Y+13	; 0x0d
     d32:	9e 85       	ldd	r25, Y+14	; 0x0e
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	91 05       	cpc	r25, r1
     d38:	09 f4       	brne	.+2      	; 0xd3c <DIO_u8SetPinDirection+0x52>
     d3a:	4f c0       	rjmp	.+158    	; 0xdda <DIO_u8SetPinDirection+0xf0>
     d3c:	2d 85       	ldd	r18, Y+13	; 0x0d
     d3e:	3e 85       	ldd	r19, Y+14	; 0x0e
     d40:	22 30       	cpi	r18, 0x02	; 2
     d42:	31 05       	cpc	r19, r1
     d44:	2c f4       	brge	.+10     	; 0xd50 <DIO_u8SetPinDirection+0x66>
     d46:	8d 85       	ldd	r24, Y+13	; 0x0d
     d48:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	71 f0       	breq	.+28     	; 0xd6a <DIO_u8SetPinDirection+0x80>
     d4e:	ed c0       	rjmp	.+474    	; 0xf2a <DIO_u8SetPinDirection+0x240>
     d50:	2d 85       	ldd	r18, Y+13	; 0x0d
     d52:	3e 85       	ldd	r19, Y+14	; 0x0e
     d54:	22 30       	cpi	r18, 0x02	; 2
     d56:	31 05       	cpc	r19, r1
     d58:	09 f4       	brne	.+2      	; 0xd5c <DIO_u8SetPinDirection+0x72>
     d5a:	77 c0       	rjmp	.+238    	; 0xe4a <DIO_u8SetPinDirection+0x160>
     d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d60:	83 30       	cpi	r24, 0x03	; 3
     d62:	91 05       	cpc	r25, r1
     d64:	09 f4       	brne	.+2      	; 0xd68 <DIO_u8SetPinDirection+0x7e>
     d66:	a9 c0       	rjmp	.+338    	; 0xeba <DIO_u8SetPinDirection+0x1d0>
     d68:	e0 c0       	rjmp	.+448    	; 0xf2a <DIO_u8SetPinDirection+0x240>
			case DIO_u8_PORTA :
			switch(Copy_u8PinDirection){
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3c 87       	std	Y+12, r19	; 0x0c
     d72:	2b 87       	std	Y+11, r18	; 0x0b
     d74:	8b 85       	ldd	r24, Y+11	; 0x0b
     d76:	9c 85       	ldd	r25, Y+12	; 0x0c
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	d1 f0       	breq	.+52     	; 0xdb0 <DIO_u8SetPinDirection+0xc6>
     d7c:	2b 85       	ldd	r18, Y+11	; 0x0b
     d7e:	3c 85       	ldd	r19, Y+12	; 0x0c
     d80:	21 30       	cpi	r18, 0x01	; 1
     d82:	31 05       	cpc	r19, r1
     d84:	09 f0       	breq	.+2      	; 0xd88 <DIO_u8SetPinDirection+0x9e>
     d86:	d1 c0       	rjmp	.+418    	; 0xf2a <DIO_u8SetPinDirection+0x240>
			//check direction
			case DIO_u8_OUTPUT:
			 SET_BIT( DIO_u8_DDRA_REG,Copy_u8PinId);
     d88:	aa e3       	ldi	r26, 0x3A	; 58
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	ea e3       	ldi	r30, 0x3A	; 58
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <DIO_u8SetPinDirection+0xbc>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <DIO_u8SetPinDirection+0xb8>
     daa:	84 2b       	or	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	bd c0       	rjmp	.+378    	; 0xf2a <DIO_u8SetPinDirection+0x240>
			 break;
			 /*********************/
			 case DIO_u8_INPUT:
			 CLR_BIT( DIO_u8_DDRA_REG,Copy_u8PinId);
     db0:	aa e3       	ldi	r26, 0x3A	; 58
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	ea e3       	ldi	r30, 0x3A	; 58
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <DIO_u8SetPinDirection+0xe4>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <DIO_u8SetPinDirection+0xe0>
     dd2:	80 95       	com	r24
     dd4:	84 23       	and	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	a8 c0       	rjmp	.+336    	; 0xf2a <DIO_u8SetPinDirection+0x240>
			  break;
			}
			break;
			/**************************************/
			case DIO_u8_PORTB :
			switch(Copy_u8PinDirection){
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	3a 87       	std	Y+10, r19	; 0x0a
     de2:	29 87       	std	Y+9, r18	; 0x09
     de4:	89 85       	ldd	r24, Y+9	; 0x09
     de6:	9a 85       	ldd	r25, Y+10	; 0x0a
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	d1 f0       	breq	.+52     	; 0xe20 <DIO_u8SetPinDirection+0x136>
     dec:	29 85       	ldd	r18, Y+9	; 0x09
     dee:	3a 85       	ldd	r19, Y+10	; 0x0a
     df0:	21 30       	cpi	r18, 0x01	; 1
     df2:	31 05       	cpc	r19, r1
     df4:	09 f0       	breq	.+2      	; 0xdf8 <DIO_u8SetPinDirection+0x10e>
     df6:	99 c0       	rjmp	.+306    	; 0xf2a <DIO_u8SetPinDirection+0x240>
			//check direction
			case DIO_u8_OUTPUT:
			 SET_BIT( DIO_u8_DDRB_REG,Copy_u8PinId);
     df8:	a7 e3       	ldi	r26, 0x37	; 55
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e7 e3       	ldi	r30, 0x37	; 55
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <DIO_u8SetPinDirection+0x12c>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <DIO_u8SetPinDirection+0x128>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	85 c0       	rjmp	.+266    	; 0xf2a <DIO_u8SetPinDirection+0x240>
			 break;
			 /*********************/
			 case DIO_u8_INPUT:
			 CLR_BIT( DIO_u8_DDRB_REG,Copy_u8PinId);
     e20:	a7 e3       	ldi	r26, 0x37	; 55
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e7 e3       	ldi	r30, 0x37	; 55
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_u8SetPinDirection+0x154>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_u8SetPinDirection+0x150>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	70 c0       	rjmp	.+224    	; 0xf2a <DIO_u8SetPinDirection+0x240>
			  break;
			}
			break;
			/***************************************/
			case DIO_u8_PORTC :
			switch(Copy_u8PinDirection){
     e4a:	8c 81       	ldd	r24, Y+4	; 0x04
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	38 87       	std	Y+8, r19	; 0x08
     e52:	2f 83       	std	Y+7, r18	; 0x07
     e54:	8f 81       	ldd	r24, Y+7	; 0x07
     e56:	98 85       	ldd	r25, Y+8	; 0x08
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	d1 f0       	breq	.+52     	; 0xe90 <DIO_u8SetPinDirection+0x1a6>
     e5c:	2f 81       	ldd	r18, Y+7	; 0x07
     e5e:	38 85       	ldd	r19, Y+8	; 0x08
     e60:	21 30       	cpi	r18, 0x01	; 1
     e62:	31 05       	cpc	r19, r1
     e64:	09 f0       	breq	.+2      	; 0xe68 <DIO_u8SetPinDirection+0x17e>
     e66:	61 c0       	rjmp	.+194    	; 0xf2a <DIO_u8SetPinDirection+0x240>
			//check direction
			case DIO_u8_OUTPUT:
			 SET_BIT( DIO_u8_DDRC_REG,Copy_u8PinId);
     e68:	a4 e3       	ldi	r26, 0x34	; 52
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e4 e3       	ldi	r30, 0x34	; 52
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_u8SetPinDirection+0x19c>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_u8SetPinDirection+0x198>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	4d c0       	rjmp	.+154    	; 0xf2a <DIO_u8SetPinDirection+0x240>
			 break;
			 /********************/
			 case DIO_u8_INPUT:
			 CLR_BIT( DIO_u8_DDRC_REG,Copy_u8PinId);
     e90:	a4 e3       	ldi	r26, 0x34	; 52
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e4 e3       	ldi	r30, 0x34	; 52
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_u8SetPinDirection+0x1c4>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_u8SetPinDirection+0x1c0>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	38 c0       	rjmp	.+112    	; 0xf2a <DIO_u8SetPinDirection+0x240>
			  break;
			}
			break;
			/****************************************/
			case DIO_u8_PORTD :
			switch(Copy_u8PinDirection){
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	3e 83       	std	Y+6, r19	; 0x06
     ec2:	2d 83       	std	Y+5, r18	; 0x05
     ec4:	8d 81       	ldd	r24, Y+5	; 0x05
     ec6:	9e 81       	ldd	r25, Y+6	; 0x06
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	c9 f0       	breq	.+50     	; 0xefe <DIO_u8SetPinDirection+0x214>
     ecc:	2d 81       	ldd	r18, Y+5	; 0x05
     ece:	3e 81       	ldd	r19, Y+6	; 0x06
     ed0:	21 30       	cpi	r18, 0x01	; 1
     ed2:	31 05       	cpc	r19, r1
     ed4:	51 f5       	brne	.+84     	; 0xf2a <DIO_u8SetPinDirection+0x240>
			//check direction
			case DIO_u8_OUTPUT:
			 SET_BIT( DIO_u8_DDRD_REG,Copy_u8PinId);
     ed6:	a1 e3       	ldi	r26, 0x31	; 49
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e1 e3       	ldi	r30, 0x31	; 49
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_u8SetPinDirection+0x20a>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_u8SetPinDirection+0x206>
     ef8:	84 2b       	or	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	16 c0       	rjmp	.+44     	; 0xf2a <DIO_u8SetPinDirection+0x240>
			 break;
			 /*********************/
			 case DIO_u8_INPUT:
			 CLR_BIT( DIO_u8_DDRD_REG,Copy_u8PinId);
     efe:	a1 e3       	ldi	r26, 0x31	; 49
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e1 e3       	ldi	r30, 0x31	; 49
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_u8SetPinDirection+0x232>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_u8SetPinDirection+0x22e>
     f20:	80 95       	com	r24
     f22:	84 23       	and	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <DIO_u8SetPinDirection+0x240>
		}
	}
	
	/********************************************/
	else{
		Local_u8ErrorState=STD_TYPES_NOK;
     f28:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
}  
     f2c:	2e 96       	adiw	r28, 0x0e	; 14
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <DIO_u8SetPinValue>:




/***************************************************************/
u8 DIO_u8SetPinValue(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8PinValue){
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	00 d0       	rcall	.+0      	; 0xf44 <DIO_u8SetPinValue+0x6>
     f44:	00 d0       	rcall	.+0      	; 0xf46 <DIO_u8SetPinValue+0x8>
     f46:	00 d0       	rcall	.+0      	; 0xf48 <DIO_u8SetPinValue+0xa>
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	8a 83       	std	Y+2, r24	; 0x02
     f4e:	6b 83       	std	Y+3, r22	; 0x03
     f50:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=STD_TYPES_OK;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	89 83       	std	Y+1, r24	; 0x01
	
	/***check port and pin within range or not****/
	if(Copy_u8PinId<=DIO_u8_PIN7){
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	88 30       	cpi	r24, 0x08	; 8
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <DIO_u8SetPinValue+0x20>
     f5c:	e8 c0       	rjmp	.+464    	; 0x112e <DIO_u8SetPinValue+0x1f0>
		switch(Copy_u8PortId){
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	3e 83       	std	Y+6, r19	; 0x06
     f66:	2d 83       	std	Y+5, r18	; 0x05
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	91 05       	cpc	r25, r1
     f70:	09 f4       	brne	.+2      	; 0xf74 <DIO_u8SetPinValue+0x36>
     f72:	48 c0       	rjmp	.+144    	; 0x1004 <DIO_u8SetPinValue+0xc6>
     f74:	2d 81       	ldd	r18, Y+5	; 0x05
     f76:	3e 81       	ldd	r19, Y+6	; 0x06
     f78:	22 30       	cpi	r18, 0x02	; 2
     f7a:	31 05       	cpc	r19, r1
     f7c:	2c f4       	brge	.+10     	; 0xf88 <DIO_u8SetPinValue+0x4a>
     f7e:	8d 81       	ldd	r24, Y+5	; 0x05
     f80:	9e 81       	ldd	r25, Y+6	; 0x06
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	71 f0       	breq	.+28     	; 0xfa2 <DIO_u8SetPinValue+0x64>
     f86:	d1 c0       	rjmp	.+418    	; 0x112a <DIO_u8SetPinValue+0x1ec>
     f88:	2d 81       	ldd	r18, Y+5	; 0x05
     f8a:	3e 81       	ldd	r19, Y+6	; 0x06
     f8c:	22 30       	cpi	r18, 0x02	; 2
     f8e:	31 05       	cpc	r19, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <DIO_u8SetPinValue+0x56>
     f92:	69 c0       	rjmp	.+210    	; 0x1066 <DIO_u8SetPinValue+0x128>
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	83 30       	cpi	r24, 0x03	; 3
     f9a:	91 05       	cpc	r25, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <DIO_u8SetPinValue+0x62>
     f9e:	94 c0       	rjmp	.+296    	; 0x10c8 <DIO_u8SetPinValue+0x18a>
     fa0:	c4 c0       	rjmp	.+392    	; 0x112a <DIO_u8SetPinValue+0x1ec>
			case DIO_u8_PORTA :
			if(Copy_u8PinValue==DIO_u8_HIGH){
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	a1 f4       	brne	.+40     	; 0xfd0 <DIO_u8SetPinValue+0x92>
				SET_BIT( DIO_u8_PORTA_REG,Copy_u8PinId);
     fa8:	ab e3       	ldi	r26, 0x3B	; 59
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	eb e3       	ldi	r30, 0x3B	; 59
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_u8SetPinValue+0x88>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_u8SetPinValue+0x84>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	b0 c0       	rjmp	.+352    	; 0x1130 <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==DIO_u8_LOW){
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	88 23       	and	r24, r24
     fd4:	a9 f4       	brne	.+42     	; 0x1000 <DIO_u8SetPinValue+0xc2>
				 CLR_BIT( DIO_u8_PORTA_REG,Copy_u8PinId);
     fd6:	ab e3       	ldi	r26, 0x3B	; 59
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	eb e3       	ldi	r30, 0x3B	; 59
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_u8SetPinValue+0xb6>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_u8SetPinValue+0xb2>
     ff8:	80 95       	com	r24
     ffa:	84 23       	and	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	98 c0       	rjmp	.+304    	; 0x1130 <DIO_u8SetPinValue+0x1f2>
			}
			else{
				 Local_u8ErrorState=STD_TYPES_NOK;
    1000:	19 82       	std	Y+1, r1	; 0x01
    1002:	96 c0       	rjmp	.+300    	; 0x1130 <DIO_u8SetPinValue+0x1f2>
			}
			 break;

			/**************************************/
			case DIO_u8_PORTB :
			if(Copy_u8PinValue==DIO_u8_HIGH){
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	a1 f4       	brne	.+40     	; 0x1032 <DIO_u8SetPinValue+0xf4>
				SET_BIT( DIO_u8_PORTB_REG,Copy_u8PinId);
    100a:	a8 e3       	ldi	r26, 0x38	; 56
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e8 e3       	ldi	r30, 0x38	; 56
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_u8SetPinValue+0xea>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_u8SetPinValue+0xe6>
    102c:	84 2b       	or	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	7f c0       	rjmp	.+254    	; 0x1130 <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==DIO_u8_LOW){
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	88 23       	and	r24, r24
    1036:	a9 f4       	brne	.+42     	; 0x1062 <DIO_u8SetPinValue+0x124>
				 CLR_BIT( DIO_u8_PORTB_REG,Copy_u8PinId);
    1038:	a8 e3       	ldi	r26, 0x38	; 56
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e8 e3       	ldi	r30, 0x38	; 56
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_u8SetPinValue+0x118>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_u8SetPinValue+0x114>
    105a:	80 95       	com	r24
    105c:	84 23       	and	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	67 c0       	rjmp	.+206    	; 0x1130 <DIO_u8SetPinValue+0x1f2>
			}
			else{
				 Local_u8ErrorState=STD_TYPES_NOK;
    1062:	19 82       	std	Y+1, r1	; 0x01
    1064:	65 c0       	rjmp	.+202    	; 0x1130 <DIO_u8SetPinValue+0x1f2>
			 break;


			/***************************************/
			case DIO_u8_PORTC :
			if(Copy_u8PinValue==DIO_u8_HIGH){
    1066:	8c 81       	ldd	r24, Y+4	; 0x04
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	a1 f4       	brne	.+40     	; 0x1094 <DIO_u8SetPinValue+0x156>
				SET_BIT( DIO_u8_PORTC_REG,Copy_u8PinId);
    106c:	a5 e3       	ldi	r26, 0x35	; 53
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e5 e3       	ldi	r30, 0x35	; 53
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_u8SetPinValue+0x14c>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_u8SetPinValue+0x148>
    108e:	84 2b       	or	r24, r20
    1090:	8c 93       	st	X, r24
    1092:	4e c0       	rjmp	.+156    	; 0x1130 <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==DIO_u8_LOW){
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	88 23       	and	r24, r24
    1098:	a9 f4       	brne	.+42     	; 0x10c4 <DIO_u8SetPinValue+0x186>
				 CLR_BIT( DIO_u8_PORTC_REG,Copy_u8PinId);
    109a:	a5 e3       	ldi	r26, 0x35	; 53
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e5 e3       	ldi	r30, 0x35	; 53
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_u8SetPinValue+0x17a>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_u8SetPinValue+0x176>
    10bc:	80 95       	com	r24
    10be:	84 23       	and	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	36 c0       	rjmp	.+108    	; 0x1130 <DIO_u8SetPinValue+0x1f2>
			}
			else{
				 Local_u8ErrorState=STD_TYPES_NOK;
    10c4:	19 82       	std	Y+1, r1	; 0x01
    10c6:	34 c0       	rjmp	.+104    	; 0x1130 <DIO_u8SetPinValue+0x1f2>
			}
			 break;

			/****************************************/
			case DIO_u8_PORTD :
			if(Copy_u8PinValue==DIO_u8_HIGH){
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	a1 f4       	brne	.+40     	; 0x10f6 <DIO_u8SetPinValue+0x1b8>
				SET_BIT( DIO_u8_PORTD_REG,Copy_u8PinId);
    10ce:	a2 e3       	ldi	r26, 0x32	; 50
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e2 e3       	ldi	r30, 0x32	; 50
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_u8SetPinValue+0x1ae>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_u8SetPinValue+0x1aa>
    10f0:	84 2b       	or	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	1d c0       	rjmp	.+58     	; 0x1130 <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==DIO_u8_LOW){
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	88 23       	and	r24, r24
    10fa:	a9 f4       	brne	.+42     	; 0x1126 <DIO_u8SetPinValue+0x1e8>
				 CLR_BIT( DIO_u8_PORTD_REG,Copy_u8PinId);
    10fc:	a2 e3       	ldi	r26, 0x32	; 50
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e2 e3       	ldi	r30, 0x32	; 50
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <DIO_u8SetPinValue+0x1dc>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <DIO_u8SetPinValue+0x1d8>
    111e:	80 95       	com	r24
    1120:	84 23       	and	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	05 c0       	rjmp	.+10     	; 0x1130 <DIO_u8SetPinValue+0x1f2>
			}
			else{//for wrong value
				 Local_u8ErrorState=STD_TYPES_NOK;
    1126:	19 82       	std	Y+1, r1	; 0x01
    1128:	03 c0       	rjmp	.+6      	; 0x1130 <DIO_u8SetPinValue+0x1f2>
			}
			 break;
			 /****************************************/
			 default:// for wrrong port
			 Local_u8ErrorState=STD_TYPES_NOK;
    112a:	19 82       	std	Y+1, r1	; 0x01
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <DIO_u8SetPinValue+0x1f2>
			 break;
        	}
	}
             /********************************************/
			 else{
		Local_u8ErrorState=STD_TYPES_NOK;
    112e:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    1130:	89 81       	ldd	r24, Y+1	; 0x01
}
    1132:	26 96       	adiw	r28, 0x06	; 6
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <DIO_u8GetPinValue>:
/*********************************************************************/


u8 DIO_u8GetPinValue(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 *Copy_pu8ReturnPinValue){
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	27 97       	sbiw	r28, 0x07	; 7
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	8a 83       	std	Y+2, r24	; 0x02
    115a:	6b 83       	std	Y+3, r22	; 0x03
    115c:	5d 83       	std	Y+5, r21	; 0x05
    115e:	4c 83       	std	Y+4, r20	; 0x04
	
		u8 Local_u8ErrorState=STD_TYPES_OK;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PinId<=DIO_u8_PIN7)&&(Copy_pu8ReturnPinValue!=NULL)){//NULL to avoid wild pointer
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	88 30       	cpi	r24, 0x08	; 8
    1168:	08 f0       	brcs	.+2      	; 0x116c <DIO_u8GetPinValue+0x28>
    116a:	78 c0       	rjmp	.+240    	; 0x125c <DIO_u8GetPinValue+0x118>
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	09 f4       	brne	.+2      	; 0x1176 <DIO_u8GetPinValue+0x32>
    1174:	73 c0       	rjmp	.+230    	; 0x125c <DIO_u8GetPinValue+0x118>
		switch(Copy_u8PortId){
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	3f 83       	std	Y+7, r19	; 0x07
    117e:	2e 83       	std	Y+6, r18	; 0x06
    1180:	4e 81       	ldd	r20, Y+6	; 0x06
    1182:	5f 81       	ldd	r21, Y+7	; 0x07
    1184:	41 30       	cpi	r20, 0x01	; 1
    1186:	51 05       	cpc	r21, r1
    1188:	59 f1       	breq	.+86     	; 0x11e0 <DIO_u8GetPinValue+0x9c>
    118a:	8e 81       	ldd	r24, Y+6	; 0x06
    118c:	9f 81       	ldd	r25, Y+7	; 0x07
    118e:	82 30       	cpi	r24, 0x02	; 2
    1190:	91 05       	cpc	r25, r1
    1192:	34 f4       	brge	.+12     	; 0x11a0 <DIO_u8GetPinValue+0x5c>
    1194:	2e 81       	ldd	r18, Y+6	; 0x06
    1196:	3f 81       	ldd	r19, Y+7	; 0x07
    1198:	21 15       	cp	r18, r1
    119a:	31 05       	cpc	r19, r1
    119c:	69 f0       	breq	.+26     	; 0x11b8 <DIO_u8GetPinValue+0x74>
    119e:	5c c0       	rjmp	.+184    	; 0x1258 <DIO_u8GetPinValue+0x114>
    11a0:	4e 81       	ldd	r20, Y+6	; 0x06
    11a2:	5f 81       	ldd	r21, Y+7	; 0x07
    11a4:	42 30       	cpi	r20, 0x02	; 2
    11a6:	51 05       	cpc	r21, r1
    11a8:	79 f1       	breq	.+94     	; 0x1208 <DIO_u8GetPinValue+0xc4>
    11aa:	8e 81       	ldd	r24, Y+6	; 0x06
    11ac:	9f 81       	ldd	r25, Y+7	; 0x07
    11ae:	83 30       	cpi	r24, 0x03	; 3
    11b0:	91 05       	cpc	r25, r1
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <DIO_u8GetPinValue+0x72>
    11b4:	3d c0       	rjmp	.+122    	; 0x1230 <DIO_u8GetPinValue+0xec>
    11b6:	50 c0       	rjmp	.+160    	; 0x1258 <DIO_u8GetPinValue+0x114>
			case DIO_u8_PORTA :
			*Copy_pu8ReturnPinValue=GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    11b8:	e9 e3       	ldi	r30, 0x39	; 57
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a9 01       	movw	r20, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_u8GetPinValue+0x8c>
    11cc:	55 95       	asr	r21
    11ce:	47 95       	ror	r20
    11d0:	8a 95       	dec	r24
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_u8GetPinValue+0x88>
    11d4:	ca 01       	movw	r24, r20
    11d6:	81 70       	andi	r24, 0x01	; 1
    11d8:	ec 81       	ldd	r30, Y+4	; 0x04
    11da:	fd 81       	ldd	r31, Y+5	; 0x05
    11dc:	80 83       	st	Z, r24
    11de:	3f c0       	rjmp	.+126    	; 0x125e <DIO_u8GetPinValue+0x11a>
			break;
			case DIO_u8_PORTB :
			*Copy_pu8ReturnPinValue=GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    11e0:	e6 e3       	ldi	r30, 0x36	; 54
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	a9 01       	movw	r20, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_u8GetPinValue+0xb4>
    11f4:	55 95       	asr	r21
    11f6:	47 95       	ror	r20
    11f8:	8a 95       	dec	r24
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_u8GetPinValue+0xb0>
    11fc:	ca 01       	movw	r24, r20
    11fe:	81 70       	andi	r24, 0x01	; 1
    1200:	ec 81       	ldd	r30, Y+4	; 0x04
    1202:	fd 81       	ldd	r31, Y+5	; 0x05
    1204:	80 83       	st	Z, r24
    1206:	2b c0       	rjmp	.+86     	; 0x125e <DIO_u8GetPinValue+0x11a>
			break;
			case DIO_u8_PORTC :
			*Copy_pu8ReturnPinValue=GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    1208:	e3 e3       	ldi	r30, 0x33	; 51
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	a9 01       	movw	r20, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_u8GetPinValue+0xdc>
    121c:	55 95       	asr	r21
    121e:	47 95       	ror	r20
    1220:	8a 95       	dec	r24
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_u8GetPinValue+0xd8>
    1224:	ca 01       	movw	r24, r20
    1226:	81 70       	andi	r24, 0x01	; 1
    1228:	ec 81       	ldd	r30, Y+4	; 0x04
    122a:	fd 81       	ldd	r31, Y+5	; 0x05
    122c:	80 83       	st	Z, r24
    122e:	17 c0       	rjmp	.+46     	; 0x125e <DIO_u8GetPinValue+0x11a>
			break;
			case DIO_u8_PORTD :
			*Copy_pu8ReturnPinValue=GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    1230:	e0 e3       	ldi	r30, 0x30	; 48
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a9 01       	movw	r20, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_u8GetPinValue+0x104>
    1244:	55 95       	asr	r21
    1246:	47 95       	ror	r20
    1248:	8a 95       	dec	r24
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_u8GetPinValue+0x100>
    124c:	ca 01       	movw	r24, r20
    124e:	81 70       	andi	r24, 0x01	; 1
    1250:	ec 81       	ldd	r30, Y+4	; 0x04
    1252:	fd 81       	ldd	r31, Y+5	; 0x05
    1254:	80 83       	st	Z, r24
    1256:	03 c0       	rjmp	.+6      	; 0x125e <DIO_u8GetPinValue+0x11a>
			break;
			default:
			 Local_u8ErrorState=STD_TYPES_NOK;
    1258:	19 82       	std	Y+1, r1	; 0x01
    125a:	01 c0       	rjmp	.+2      	; 0x125e <DIO_u8GetPinValue+0x11a>
			 break;
		}}
	
	else{
		Local_u8ErrorState=STD_TYPES_NOK;
    125c:	19 82       	std	Y+1, r1	; 0x01
	}
	return  Local_u8ErrorState;
    125e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1260:	27 96       	adiw	r28, 0x07	; 7
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <DIO_u8SetPortDirection>:


/*************************************************************************/
u8 DIO_u8SetPortDirection(u8 Copy_u8PortId,u8 Copy_u8PortDirection){
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	2d 97       	sbiw	r28, 0x0d	; 13
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	8a 83       	std	Y+2, r24	; 0x02
    1288:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ErrorState=STD_TYPES_OK;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PortDirection==DIO_u8_OUTPUT)||(Copy_u8PortDirection==DIO_u8_OUTPUT)){
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	21 f0       	breq	.+8      	; 0x129c <DIO_u8SetPortDirection+0x2a>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	09 f0       	breq	.+2      	; 0x129c <DIO_u8SetPortDirection+0x2a>
    129a:	7e c0       	rjmp	.+252    	; 0x1398 <DIO_u8SetPortDirection+0x126>
			switch(Copy_u8PortId){
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	3d 87       	std	Y+13, r19	; 0x0d
    12a4:	2c 87       	std	Y+12, r18	; 0x0c
    12a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    12a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	91 05       	cpc	r25, r1
    12ae:	71 f1       	breq	.+92     	; 0x130c <DIO_u8SetPortDirection+0x9a>
    12b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    12b2:	3d 85       	ldd	r19, Y+13	; 0x0d
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	31 05       	cpc	r19, r1
    12b8:	2c f4       	brge	.+10     	; 0x12c4 <DIO_u8SetPortDirection+0x52>
    12ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    12bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	69 f0       	breq	.+26     	; 0x12dc <DIO_u8SetPortDirection+0x6a>
    12c2:	69 c0       	rjmp	.+210    	; 0x1396 <DIO_u8SetPortDirection+0x124>
    12c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    12c6:	3d 85       	ldd	r19, Y+13	; 0x0d
    12c8:	22 30       	cpi	r18, 0x02	; 2
    12ca:	31 05       	cpc	r19, r1
    12cc:	b1 f1       	breq	.+108    	; 0x133a <DIO_u8SetPortDirection+0xc8>
    12ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    12d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    12d2:	83 30       	cpi	r24, 0x03	; 3
    12d4:	91 05       	cpc	r25, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <DIO_u8SetPortDirection+0x68>
    12d8:	47 c0       	rjmp	.+142    	; 0x1368 <DIO_u8SetPortDirection+0xf6>
    12da:	5d c0       	rjmp	.+186    	; 0x1396 <DIO_u8SetPortDirection+0x124>
			case DIO_u8_PORTA :
			switch(Copy_u8PortDirection){
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3b 87       	std	Y+11, r19	; 0x0b
    12e4:	2a 87       	std	Y+10, r18	; 0x0a
    12e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	59 f0       	breq	.+22     	; 0x1304 <DIO_u8SetPortDirection+0x92>
    12ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    12f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    12f2:	21 30       	cpi	r18, 0x01	; 1
    12f4:	31 05       	cpc	r19, r1
    12f6:	09 f0       	breq	.+2      	; 0x12fa <DIO_u8SetPortDirection+0x88>
    12f8:	4f c0       	rjmp	.+158    	; 0x1398 <DIO_u8SetPortDirection+0x126>
			case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG=0xff;
    12fa:	ea e3       	ldi	r30, 0x3A	; 58
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
    1300:	80 83       	st	Z, r24
    1302:	4a c0       	rjmp	.+148    	; 0x1398 <DIO_u8SetPortDirection+0x126>
			break;
			case DIO_u8_INPUT:
			DIO_u8_DDRA_REG=0x00;
    1304:	ea e3       	ldi	r30, 0x3A	; 58
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	10 82       	st	Z, r1
    130a:	46 c0       	rjmp	.+140    	; 0x1398 <DIO_u8SetPortDirection+0x126>
			}
		break;
		
		
		case DIO_u8_PORTB :
			switch(Copy_u8PortDirection){
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	39 87       	std	Y+9, r19	; 0x09
    1314:	28 87       	std	Y+8, r18	; 0x08
    1316:	88 85       	ldd	r24, Y+8	; 0x08
    1318:	99 85       	ldd	r25, Y+9	; 0x09
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	51 f0       	breq	.+20     	; 0x1332 <DIO_u8SetPortDirection+0xc0>
    131e:	28 85       	ldd	r18, Y+8	; 0x08
    1320:	39 85       	ldd	r19, Y+9	; 0x09
    1322:	21 30       	cpi	r18, 0x01	; 1
    1324:	31 05       	cpc	r19, r1
    1326:	c1 f5       	brne	.+112    	; 0x1398 <DIO_u8SetPortDirection+0x126>
			case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG=0xff;
    1328:	e7 e3       	ldi	r30, 0x37	; 55
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8f ef       	ldi	r24, 0xFF	; 255
    132e:	80 83       	st	Z, r24
    1330:	33 c0       	rjmp	.+102    	; 0x1398 <DIO_u8SetPortDirection+0x126>
			break;
			case DIO_u8_INPUT:
			DIO_u8_DDRB_REG=0x00;
    1332:	e7 e3       	ldi	r30, 0x37	; 55
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	10 82       	st	Z, r1
    1338:	2f c0       	rjmp	.+94     	; 0x1398 <DIO_u8SetPortDirection+0x126>
			}
		break;
		
		
		case DIO_u8_PORTC :
			switch(Copy_u8PortDirection){
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3f 83       	std	Y+7, r19	; 0x07
    1342:	2e 83       	std	Y+6, r18	; 0x06
    1344:	8e 81       	ldd	r24, Y+6	; 0x06
    1346:	9f 81       	ldd	r25, Y+7	; 0x07
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	51 f0       	breq	.+20     	; 0x1360 <DIO_u8SetPortDirection+0xee>
    134c:	2e 81       	ldd	r18, Y+6	; 0x06
    134e:	3f 81       	ldd	r19, Y+7	; 0x07
    1350:	21 30       	cpi	r18, 0x01	; 1
    1352:	31 05       	cpc	r19, r1
    1354:	09 f5       	brne	.+66     	; 0x1398 <DIO_u8SetPortDirection+0x126>
			case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG=0xff;
    1356:	e4 e3       	ldi	r30, 0x34	; 52
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8f ef       	ldi	r24, 0xFF	; 255
    135c:	80 83       	st	Z, r24
    135e:	1c c0       	rjmp	.+56     	; 0x1398 <DIO_u8SetPortDirection+0x126>
			break;
			case DIO_u8_INPUT:
			DIO_u8_DDRC_REG=0x00;
    1360:	e4 e3       	ldi	r30, 0x34	; 52
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	10 82       	st	Z, r1
    1366:	18 c0       	rjmp	.+48     	; 0x1398 <DIO_u8SetPortDirection+0x126>
			}
		break;
		
		
		case DIO_u8_PORTD :
			switch(Copy_u8PortDirection){
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	3d 83       	std	Y+5, r19	; 0x05
    1370:	2c 83       	std	Y+4, r18	; 0x04
    1372:	8c 81       	ldd	r24, Y+4	; 0x04
    1374:	9d 81       	ldd	r25, Y+5	; 0x05
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	51 f0       	breq	.+20     	; 0x138e <DIO_u8SetPortDirection+0x11c>
    137a:	2c 81       	ldd	r18, Y+4	; 0x04
    137c:	3d 81       	ldd	r19, Y+5	; 0x05
    137e:	21 30       	cpi	r18, 0x01	; 1
    1380:	31 05       	cpc	r19, r1
    1382:	51 f4       	brne	.+20     	; 0x1398 <DIO_u8SetPortDirection+0x126>
			case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG=0xff;
    1384:	e1 e3       	ldi	r30, 0x31	; 49
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	8f ef       	ldi	r24, 0xFF	; 255
    138a:	80 83       	st	Z, r24
    138c:	05 c0       	rjmp	.+10     	; 0x1398 <DIO_u8SetPortDirection+0x126>
			break;
			case DIO_u8_INPUT:
			DIO_u8_DDRD_REG=0x00;
    138e:	e1 e3       	ldi	r30, 0x31	; 49
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	10 82       	st	Z, r1
    1394:	01 c0       	rjmp	.+2      	; 0x1398 <DIO_u8SetPortDirection+0x126>
			break;
			}
		break;
		
		default:
		     Local_u8ErrorState=STD_TYPES_NOK;
    1396:	19 82       	std	Y+1, r1	; 0x01
		}
		
		}
	
		
	return  Local_u8ErrorState;
    1398:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    139a:	2d 96       	adiw	r28, 0x0d	; 13
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <DIO_u8SetPortValue>:

/************************************************************************************/
u8 DIO_u8SetPortValue(u8 Copy_u8PortId,u8 Copy_u8PortValue){
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <DIO_u8SetPortValue+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <DIO_u8SetPortValue+0x8>
    13b4:	0f 92       	push	r0
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	8a 83       	std	Y+2, r24	; 0x02
    13bc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=STD_TYPES_OK;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	89 83       	std	Y+1, r24	; 0x01
	
	/***check port and pin within range or not****/
	
		switch(Copy_u8PortId){
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	3d 83       	std	Y+5, r19	; 0x05
    13ca:	2c 83       	std	Y+4, r18	; 0x04
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	9d 81       	ldd	r25, Y+5	; 0x05
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	91 05       	cpc	r25, r1
    13d4:	d1 f0       	breq	.+52     	; 0x140a <DIO_u8SetPortValue+0x5e>
    13d6:	2c 81       	ldd	r18, Y+4	; 0x04
    13d8:	3d 81       	ldd	r19, Y+5	; 0x05
    13da:	22 30       	cpi	r18, 0x02	; 2
    13dc:	31 05       	cpc	r19, r1
    13de:	2c f4       	brge	.+10     	; 0x13ea <DIO_u8SetPortValue+0x3e>
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	9d 81       	ldd	r25, Y+5	; 0x05
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	61 f0       	breq	.+24     	; 0x1400 <DIO_u8SetPortValue+0x54>
    13e8:	1f c0       	rjmp	.+62     	; 0x1428 <DIO_u8SetPortValue+0x7c>
    13ea:	2c 81       	ldd	r18, Y+4	; 0x04
    13ec:	3d 81       	ldd	r19, Y+5	; 0x05
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	81 f0       	breq	.+32     	; 0x1414 <DIO_u8SetPortValue+0x68>
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	9d 81       	ldd	r25, Y+5	; 0x05
    13f8:	83 30       	cpi	r24, 0x03	; 3
    13fa:	91 05       	cpc	r25, r1
    13fc:	81 f0       	breq	.+32     	; 0x141e <DIO_u8SetPortValue+0x72>
    13fe:	14 c0       	rjmp	.+40     	; 0x1428 <DIO_u8SetPortValue+0x7c>
			case DIO_u8_PORTA :
			 DIO_u8_PORTA_REG=Copy_u8PortValue;
    1400:	eb e3       	ldi	r30, 0x3B	; 59
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	80 83       	st	Z, r24
    1408:	10 c0       	rjmp	.+32     	; 0x142a <DIO_u8SetPortValue+0x7e>
			 break;

			/**************************************/
			case DIO_u8_PORTB :
			 DIO_u8_PORTB_REG=Copy_u8PortValue;
    140a:	e8 e3       	ldi	r30, 0x38	; 56
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	80 83       	st	Z, r24
    1412:	0b c0       	rjmp	.+22     	; 0x142a <DIO_u8SetPortValue+0x7e>
			 break;

			/***************************************/
			case DIO_u8_PORTC :
			 DIO_u8_PORTC_REG=Copy_u8PortValue;
    1414:	e5 e3       	ldi	r30, 0x35	; 53
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	80 83       	st	Z, r24
    141c:	06 c0       	rjmp	.+12     	; 0x142a <DIO_u8SetPortValue+0x7e>
			 break;

			/****************************************/
			case DIO_u8_PORTD :
			 DIO_u8_PORTD_REG=Copy_u8PortValue;
    141e:	e2 e3       	ldi	r30, 0x32	; 50
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	80 83       	st	Z, r24
    1426:	01 c0       	rjmp	.+2      	; 0x142a <DIO_u8SetPortValue+0x7e>
			 break;
			 /****************************************/
			 default:
			 Local_u8ErrorState=STD_TYPES_NOK;
    1428:	19 82       	std	Y+1, r1	; 0x01
			 break;
		}
             /********************************************/
		

	return Local_u8ErrorState;
    142a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <DIO_u8GetPortValue>:


u8 DIO_u8GetPortValue(u8 Copy_u8PortId,u8*Copy_pu8ReturnPortValue){
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <DIO_u8GetPortValue+0x6>
    1442:	00 d0       	rcall	.+0      	; 0x1444 <DIO_u8GetPortValue+0x8>
    1444:	00 d0       	rcall	.+0      	; 0x1446 <DIO_u8GetPortValue+0xa>
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	8a 83       	std	Y+2, r24	; 0x02
    144c:	7c 83       	std	Y+4, r23	; 0x04
    144e:	6b 83       	std	Y+3, r22	; 0x03
	
	
		u8 Local_u8ErrorState=STD_TYPES_OK;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	89 83       	std	Y+1, r24	; 0x01
		
		if(Copy_pu8ReturnPortValue!=NULL){//NULL to avoid wild pointer
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	e9 f1       	breq	.+122    	; 0x14d6 <DIO_u8GetPortValue+0x9a>
		switch(Copy_u8PortId){
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	3e 83       	std	Y+6, r19	; 0x06
    1464:	2d 83       	std	Y+5, r18	; 0x05
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	91 05       	cpc	r25, r1
    146e:	e1 f0       	breq	.+56     	; 0x14a8 <DIO_u8GetPortValue+0x6c>
    1470:	2d 81       	ldd	r18, Y+5	; 0x05
    1472:	3e 81       	ldd	r19, Y+6	; 0x06
    1474:	22 30       	cpi	r18, 0x02	; 2
    1476:	31 05       	cpc	r19, r1
    1478:	2c f4       	brge	.+10     	; 0x1484 <DIO_u8GetPortValue+0x48>
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	61 f0       	breq	.+24     	; 0x149a <DIO_u8GetPortValue+0x5e>
    1482:	27 c0       	rjmp	.+78     	; 0x14d2 <DIO_u8GetPortValue+0x96>
    1484:	2d 81       	ldd	r18, Y+5	; 0x05
    1486:	3e 81       	ldd	r19, Y+6	; 0x06
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	a1 f0       	breq	.+40     	; 0x14b6 <DIO_u8GetPortValue+0x7a>
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	91 05       	cpc	r25, r1
    1496:	b1 f0       	breq	.+44     	; 0x14c4 <DIO_u8GetPortValue+0x88>
    1498:	1c c0       	rjmp	.+56     	; 0x14d2 <DIO_u8GetPortValue+0x96>
			case DIO_u8_PORTA :
			*Copy_pu8ReturnPortValue=DIO_u8_PINA_REG;
    149a:	e9 e3       	ldi	r30, 0x39	; 57
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	eb 81       	ldd	r30, Y+3	; 0x03
    14a2:	fc 81       	ldd	r31, Y+4	; 0x04
    14a4:	80 83       	st	Z, r24
    14a6:	18 c0       	rjmp	.+48     	; 0x14d8 <DIO_u8GetPortValue+0x9c>
			break;
			case DIO_u8_PORTB :
			*Copy_pu8ReturnPortValue=DIO_u8_PINB_REG;
    14a8:	e6 e3       	ldi	r30, 0x36	; 54
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	eb 81       	ldd	r30, Y+3	; 0x03
    14b0:	fc 81       	ldd	r31, Y+4	; 0x04
    14b2:	80 83       	st	Z, r24
    14b4:	11 c0       	rjmp	.+34     	; 0x14d8 <DIO_u8GetPortValue+0x9c>
			break;
			case DIO_u8_PORTC :
			*Copy_pu8ReturnPortValue=DIO_u8_PINC_REG;
    14b6:	e3 e3       	ldi	r30, 0x33	; 51
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	eb 81       	ldd	r30, Y+3	; 0x03
    14be:	fc 81       	ldd	r31, Y+4	; 0x04
    14c0:	80 83       	st	Z, r24
    14c2:	0a c0       	rjmp	.+20     	; 0x14d8 <DIO_u8GetPortValue+0x9c>
			break;
			case DIO_u8_PORTD :
			*Copy_pu8ReturnPortValue=DIO_u8_PIND_REG;
    14c4:	e0 e3       	ldi	r30, 0x30	; 48
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	eb 81       	ldd	r30, Y+3	; 0x03
    14cc:	fc 81       	ldd	r31, Y+4	; 0x04
    14ce:	80 83       	st	Z, r24
    14d0:	03 c0       	rjmp	.+6      	; 0x14d8 <DIO_u8GetPortValue+0x9c>
			break;
			default:
			 Local_u8ErrorState=STD_TYPES_NOK;
    14d2:	19 82       	std	Y+1, r1	; 0x01
    14d4:	01 c0       	rjmp	.+2      	; 0x14d8 <DIO_u8GetPortValue+0x9c>
			 break;
		}}
		else{
			 Local_u8ErrorState=STD_TYPES_NOK;
    14d6:	19 82       	std	Y+1, r1	; 0x01
		}
	
	return  Local_u8ErrorState;
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}  
    14da:	26 96       	adiw	r28, 0x06	; 6
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <GIE_Enable>:
#include "STD_Types.h"
#include "BIT_MATH.h"
#include "GIE_Private.h"
#include "GIE_interface.h"
void GIE_Enable(void)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
	/*enable GLOBAL Enable  EXTI0Enable-->GIE*/
		SET_BIT(GIE_u8_SREG,SREGI_BIT);
    14f4:	af e5       	ldi	r26, 0x5F	; 95
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	ef e5       	ldi	r30, 0x5F	; 95
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 68       	ori	r24, 0x80	; 128
    1500:	8c 93       	st	X, r24
}
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <GIE_disable>:
void GIE_disable(void)
{
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
CLR_BIT(GIE_u8_SREG,SREGI_BIT);
    1510:	af e5       	ldi	r26, 0x5F	; 95
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	ef e5       	ldi	r30, 0x5F	; 95
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8f 77       	andi	r24, 0x7F	; 127
    151c:	8c 93       	st	X, r24
}
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <KEYPAD_u8GetKeyState>:
 const u8 KEYPAD_Au8Keys[4][4]=KEYPAD_KEYS;
 const u8 KEYPAD_Au8RowsPins[]={KEYPAD_u8_R1_PIN, KEYPAD_u8_R2_PIN, KEYPAD_u8_R3_PIN, KEYPAD_u8_R4_PIN};
 const u8 KEYPAD_Au8ColsPins[]={KEYPAD_u8_C1_PIN, KEYPAD_u8_C2_PIN, KEYPAD_u8_C3_PIN, KEYPAD_u8_C4_PIN};


  u8 KEYPAD_u8GetKeyState(u8*Copy_ReturnedKey){
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	65 97       	sbiw	r28, 0x15	; 21
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	9d 8b       	std	Y+21, r25	; 0x15
    153a:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ReturnedKey;
	u8 Local_u8Flag=0;
    153c:	1a 8a       	std	Y+18, r1	; 0x12
	u8 Local_u8ErrorState=STD_TYPES_OK;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	89 8b       	std	Y+17, r24	; 0x11
	*Copy_ReturnedKey=KEYPAPD_u8_KEY_NOT_Pressed; // i give him intial value to avoid garbge value when the no key is pressed
    1542:	ec 89       	ldd	r30, Y+20	; 0x14
    1544:	fd 89       	ldd	r31, Y+21	; 0x15
    1546:	8f ef       	ldi	r24, 0xFF	; 255
    1548:	80 83       	st	Z, r24
	/**check wild pointer***/
	if(Copy_ReturnedKey!=NULL){
    154a:	8c 89       	ldd	r24, Y+20	; 0x14
    154c:	9d 89       	ldd	r25, Y+21	; 0x15
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	09 f4       	brne	.+2      	; 0x1554 <KEYPAD_u8GetKeyState+0x30>
    1552:	ec c0       	rjmp	.+472    	; 0x172c <KEYPAD_u8GetKeyState+0x208>
		for(u8 i=0;i<4;i++){
    1554:	18 8a       	std	Y+16, r1	; 0x10
    1556:	e5 c0       	rjmp	.+458    	; 0x1722 <KEYPAD_u8GetKeyState+0x1fe>
			DIO_u8SetPinValue(KEYPAD_PORT, KEYPAD_Au8RowsPins[i],DIO_u8_LOW);
    1558:	88 89       	ldd	r24, Y+16	; 0x10
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	fc 01       	movw	r30, r24
    1560:	e8 58       	subi	r30, 0x88	; 136
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	90 81       	ld	r25, Z
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	69 2f       	mov	r22, r25
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
			for(u8 j=0;j<4;j++){
    1570:	1f 86       	std	Y+15, r1	; 0x0f
    1572:	c1 c0       	rjmp	.+386    	; 0x16f6 <KEYPAD_u8GetKeyState+0x1d2>
				//Copy_ReturnedKey  -----> return high or low  but i need to return
			DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_Au8ColsPins[j],&Local_u8ReturnedKey);
    1574:	8f 85       	ldd	r24, Y+15	; 0x0f
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	fc 01       	movw	r30, r24
    157c:	e4 58       	subi	r30, 0x84	; 132
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	90 81       	ld	r25, Z
    1582:	9e 01       	movw	r18, r28
    1584:	2d 5e       	subi	r18, 0xED	; 237
    1586:	3f 4f       	sbci	r19, 0xFF	; 255
    1588:	83 e0       	ldi	r24, 0x03	; 3
    158a:	69 2f       	mov	r22, r25
    158c:	a9 01       	movw	r20, r18
    158e:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_u8GetPinValue>
			if(Local_u8ReturnedKey==DIO_u8_LOW){			//button pressed
    1592:	8b 89       	ldd	r24, Y+19	; 0x13
    1594:	88 23       	and	r24, r24
    1596:	09 f0       	breq	.+2      	; 0x159a <KEYPAD_u8GetKeyState+0x76>
    1598:	ab c0       	rjmp	.+342    	; 0x16f0 <KEYPAD_u8GetKeyState+0x1cc>
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	a0 ea       	ldi	r26, 0xA0	; 160
    15a0:	b1 e4       	ldi	r27, 0x41	; 65
    15a2:	8b 87       	std	Y+11, r24	; 0x0b
    15a4:	9c 87       	std	Y+12, r25	; 0x0c
    15a6:	ad 87       	std	Y+13, r26	; 0x0d
    15a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	4a ef       	ldi	r20, 0xFA	; 250
    15b8:	54 e4       	ldi	r21, 0x44	; 68
    15ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	8f 83       	std	Y+7, r24	; 0x07
    15c4:	98 87       	std	Y+8, r25	; 0x08
    15c6:	a9 87       	std	Y+9, r26	; 0x09
    15c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ca:	6f 81       	ldd	r22, Y+7	; 0x07
    15cc:	78 85       	ldd	r23, Y+8	; 0x08
    15ce:	89 85       	ldd	r24, Y+9	; 0x09
    15d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e8       	ldi	r20, 0x80	; 128
    15d8:	5f e3       	ldi	r21, 0x3F	; 63
    15da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15de:	88 23       	and	r24, r24
    15e0:	2c f4       	brge	.+10     	; 0x15ec <KEYPAD_u8GetKeyState+0xc8>
		__ticks = 1;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	9e 83       	std	Y+6, r25	; 0x06
    15e8:	8d 83       	std	Y+5, r24	; 0x05
    15ea:	3f c0       	rjmp	.+126    	; 0x166a <KEYPAD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    15ec:	6f 81       	ldd	r22, Y+7	; 0x07
    15ee:	78 85       	ldd	r23, Y+8	; 0x08
    15f0:	89 85       	ldd	r24, Y+9	; 0x09
    15f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	3f ef       	ldi	r19, 0xFF	; 255
    15f8:	4f e7       	ldi	r20, 0x7F	; 127
    15fa:	57 e4       	ldi	r21, 0x47	; 71
    15fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1600:	18 16       	cp	r1, r24
    1602:	4c f5       	brge	.+82     	; 0x1656 <KEYPAD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1604:	6b 85       	ldd	r22, Y+11	; 0x0b
    1606:	7c 85       	ldd	r23, Y+12	; 0x0c
    1608:	8d 85       	ldd	r24, Y+13	; 0x0d
    160a:	9e 85       	ldd	r25, Y+14	; 0x0e
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e2       	ldi	r20, 0x20	; 32
    1612:	51 e4       	ldi	r21, 0x41	; 65
    1614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	bc 01       	movw	r22, r24
    161e:	cd 01       	movw	r24, r26
    1620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	9e 83       	std	Y+6, r25	; 0x06
    162a:	8d 83       	std	Y+5, r24	; 0x05
    162c:	0f c0       	rjmp	.+30     	; 0x164c <KEYPAD_u8GetKeyState+0x128>
    162e:	88 ec       	ldi	r24, 0xC8	; 200
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9c 83       	std	Y+4, r25	; 0x04
    1634:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	9c 81       	ldd	r25, Y+4	; 0x04
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <KEYPAD_u8GetKeyState+0x116>
    163e:	9c 83       	std	Y+4, r25	; 0x04
    1640:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1642:	8d 81       	ldd	r24, Y+5	; 0x05
    1644:	9e 81       	ldd	r25, Y+6	; 0x06
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	9e 83       	std	Y+6, r25	; 0x06
    164a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
    164e:	9e 81       	ldd	r25, Y+6	; 0x06
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	69 f7       	brne	.-38     	; 0x162e <KEYPAD_u8GetKeyState+0x10a>
    1654:	14 c0       	rjmp	.+40     	; 0x167e <KEYPAD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1656:	6f 81       	ldd	r22, Y+7	; 0x07
    1658:	78 85       	ldd	r23, Y+8	; 0x08
    165a:	89 85       	ldd	r24, Y+9	; 0x09
    165c:	9a 85       	ldd	r25, Y+10	; 0x0a
    165e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	9e 83       	std	Y+6, r25	; 0x06
    1668:	8d 83       	std	Y+5, r24	; 0x05
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	9a 83       	std	Y+2, r25	; 0x02
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	9a 81       	ldd	r25, Y+2	; 0x02
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <KEYPAD_u8GetKeyState+0x152>
    167a:	9a 83       	std	Y+2, r25	; 0x02
    167c:	89 83       	std	Y+1, r24	; 0x01
				/*****debouncing****/
				_delay_ms(20);
				DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_Au8ColsPins[j],&Local_u8ReturnedKey);
    167e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1680:	88 2f       	mov	r24, r24
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	fc 01       	movw	r30, r24
    1686:	e4 58       	subi	r30, 0x84	; 132
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	90 81       	ld	r25, Z
    168c:	9e 01       	movw	r18, r28
    168e:	2d 5e       	subi	r18, 0xED	; 237
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	69 2f       	mov	r22, r25
    1696:	a9 01       	movw	r20, r18
    1698:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_u8GetPinValue>
    169c:	0f c0       	rjmp	.+30     	; 0x16bc <KEYPAD_u8GetKeyState+0x198>
				 while(Local_u8ReturnedKey==DIO_u8_LOW){
						DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_Au8ColsPins[j],&Local_u8ReturnedKey);
    169e:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	fc 01       	movw	r30, r24
    16a6:	e4 58       	subi	r30, 0x84	; 132
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	90 81       	ld	r25, Z
    16ac:	9e 01       	movw	r18, r28
    16ae:	2d 5e       	subi	r18, 0xED	; 237
    16b0:	3f 4f       	sbci	r19, 0xFF	; 255
    16b2:	83 e0       	ldi	r24, 0x03	; 3
    16b4:	69 2f       	mov	r22, r25
    16b6:	a9 01       	movw	r20, r18
    16b8:	0e 94 a2 08 	call	0x1144	; 0x1144 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_Au8ColsPins[j],&Local_u8ReturnedKey);
			if(Local_u8ReturnedKey==DIO_u8_LOW){			//button pressed
				/*****debouncing****/
				_delay_ms(20);
				DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_Au8ColsPins[j],&Local_u8ReturnedKey);
				 while(Local_u8ReturnedKey==DIO_u8_LOW){
    16bc:	8b 89       	ldd	r24, Y+19	; 0x13
    16be:	88 23       	and	r24, r24
    16c0:	71 f3       	breq	.-36     	; 0x169e <KEYPAD_u8GetKeyState+0x17a>
						DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_Au8ColsPins[j],&Local_u8ReturnedKey);

				 }
				  Local_u8Flag=1;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	8a 8b       	std	Y+18, r24	; 0x12
				*Copy_ReturnedKey=KEYPAD_Au8Keys[i][j];
    16c6:	88 89       	ldd	r24, Y+16	; 0x10
    16c8:	48 2f       	mov	r20, r24
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	ca 01       	movw	r24, r20
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	82 0f       	add	r24, r18
    16de:	93 1f       	adc	r25, r19
    16e0:	fc 01       	movw	r30, r24
    16e2:	e8 59       	subi	r30, 0x98	; 152
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	80 81       	ld	r24, Z
    16e8:	ec 89       	ldd	r30, Y+20	; 0x14
    16ea:	fd 89       	ldd	r31, Y+21	; 0x15
    16ec:	80 83       	st	Z, r24
    16ee:	07 c0       	rjmp	.+14     	; 0x16fe <KEYPAD_u8GetKeyState+0x1da>
	*Copy_ReturnedKey=KEYPAPD_u8_KEY_NOT_Pressed; // i give him intial value to avoid garbge value when the no key is pressed
	/**check wild pointer***/
	if(Copy_ReturnedKey!=NULL){
		for(u8 i=0;i<4;i++){
			DIO_u8SetPinValue(KEYPAD_PORT, KEYPAD_Au8RowsPins[i],DIO_u8_LOW);
			for(u8 j=0;j<4;j++){
    16f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f2:	8f 5f       	subi	r24, 0xFF	; 255
    16f4:	8f 87       	std	Y+15, r24	; 0x0f
    16f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f8:	84 30       	cpi	r24, 0x04	; 4
    16fa:	08 f4       	brcc	.+2      	; 0x16fe <KEYPAD_u8GetKeyState+0x1da>
    16fc:	3b cf       	rjmp	.-394    	; 0x1574 <KEYPAD_u8GetKeyState+0x50>
				break;
			}

			}
			/*deactivate row*/
			DIO_u8SetPinValue(KEYPAD_PORT, KEYPAD_Au8RowsPins[i],DIO_u8_HIGH);
    16fe:	88 89       	ldd	r24, Y+16	; 0x10
    1700:	88 2f       	mov	r24, r24
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	fc 01       	movw	r30, r24
    1706:	e8 58       	subi	r30, 0x88	; 136
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	90 81       	ld	r25, Z
    170c:	83 e0       	ldi	r24, 0x03	; 3
    170e:	69 2f       	mov	r22, r25
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
			if(Local_u8Flag){
    1716:	8a 89       	ldd	r24, Y+18	; 0x12
    1718:	88 23       	and	r24, r24
    171a:	49 f4       	brne	.+18     	; 0x172e <KEYPAD_u8GetKeyState+0x20a>
	u8 Local_u8Flag=0;
	u8 Local_u8ErrorState=STD_TYPES_OK;
	*Copy_ReturnedKey=KEYPAPD_u8_KEY_NOT_Pressed; // i give him intial value to avoid garbge value when the no key is pressed
	/**check wild pointer***/
	if(Copy_ReturnedKey!=NULL){
		for(u8 i=0;i<4;i++){
    171c:	88 89       	ldd	r24, Y+16	; 0x10
    171e:	8f 5f       	subi	r24, 0xFF	; 255
    1720:	88 8b       	std	Y+16, r24	; 0x10
    1722:	88 89       	ldd	r24, Y+16	; 0x10
    1724:	84 30       	cpi	r24, 0x04	; 4
    1726:	08 f4       	brcc	.+2      	; 0x172a <KEYPAD_u8GetKeyState+0x206>
    1728:	17 cf       	rjmp	.-466    	; 0x1558 <KEYPAD_u8GetKeyState+0x34>
    172a:	01 c0       	rjmp	.+2      	; 0x172e <KEYPAD_u8GetKeyState+0x20a>

		}

	}
	else{
		Local_u8ErrorState=STD_TYPES_NOK;
    172c:	19 8a       	std	Y+17, r1	; 0x11
	}
	return 	Local_u8ErrorState ;
    172e:	89 89       	ldd	r24, Y+17	; 0x11
}
    1730:	65 96       	adiw	r28, 0x15	; 21
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <LCD_voidIntit>:
/*****HAL****/
#include"LCD_Interface.h"
#include "LCD_Private.h"
#include"LCD_Config.h"

void LCD_voidIntit(){
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	cc 54       	subi	r28, 0x4C	; 76
    1750:	d0 40       	sbci	r29, 0x00	; 0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	fe 01       	movw	r30, r28
    175e:	e7 5b       	subi	r30, 0xB7	; 183
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	ac e0       	ldi	r26, 0x0C	; 12
    1768:	b2 e4       	ldi	r27, 0x42	; 66
    176a:	80 83       	st	Z, r24
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	a2 83       	std	Z+2, r26	; 0x02
    1770:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1772:	8e 01       	movw	r16, r28
    1774:	0b 5b       	subi	r16, 0xBB	; 187
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	fe 01       	movw	r30, r28
    177a:	e7 5b       	subi	r30, 0xB7	; 183
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	60 81       	ld	r22, Z
    1780:	71 81       	ldd	r23, Z+1	; 0x01
    1782:	82 81       	ldd	r24, Z+2	; 0x02
    1784:	93 81       	ldd	r25, Z+3	; 0x03
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	4a ef       	ldi	r20, 0xFA	; 250
    178c:	54 e4       	ldi	r21, 0x44	; 68
    178e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	f8 01       	movw	r30, r16
    1798:	80 83       	st	Z, r24
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	a2 83       	std	Z+2, r26	; 0x02
    179e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17a0:	fe 01       	movw	r30, r28
    17a2:	eb 5b       	subi	r30, 0xBB	; 187
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	60 81       	ld	r22, Z
    17a8:	71 81       	ldd	r23, Z+1	; 0x01
    17aa:	82 81       	ldd	r24, Z+2	; 0x02
    17ac:	93 81       	ldd	r25, Z+3	; 0x03
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e8       	ldi	r20, 0x80	; 128
    17b4:	5f e3       	ldi	r21, 0x3F	; 63
    17b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ba:	88 23       	and	r24, r24
    17bc:	44 f4       	brge	.+16     	; 0x17ce <LCD_voidIntit+0x8c>
		__ticks = 1;
    17be:	fe 01       	movw	r30, r28
    17c0:	ed 5b       	subi	r30, 0xBD	; 189
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	91 83       	std	Z+1, r25	; 0x01
    17ca:	80 83       	st	Z, r24
    17cc:	64 c0       	rjmp	.+200    	; 0x1896 <LCD_voidIntit+0x154>
	else if (__tmp > 65535)
    17ce:	fe 01       	movw	r30, r28
    17d0:	eb 5b       	subi	r30, 0xBB	; 187
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	60 81       	ld	r22, Z
    17d6:	71 81       	ldd	r23, Z+1	; 0x01
    17d8:	82 81       	ldd	r24, Z+2	; 0x02
    17da:	93 81       	ldd	r25, Z+3	; 0x03
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	3f ef       	ldi	r19, 0xFF	; 255
    17e0:	4f e7       	ldi	r20, 0x7F	; 127
    17e2:	57 e4       	ldi	r21, 0x47	; 71
    17e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17e8:	18 16       	cp	r1, r24
    17ea:	0c f0       	brlt	.+2      	; 0x17ee <LCD_voidIntit+0xac>
    17ec:	43 c0       	rjmp	.+134    	; 0x1874 <LCD_voidIntit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ee:	fe 01       	movw	r30, r28
    17f0:	e7 5b       	subi	r30, 0xB7	; 183
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	60 81       	ld	r22, Z
    17f6:	71 81       	ldd	r23, Z+1	; 0x01
    17f8:	82 81       	ldd	r24, Z+2	; 0x02
    17fa:	93 81       	ldd	r25, Z+3	; 0x03
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e2       	ldi	r20, 0x20	; 32
    1802:	51 e4       	ldi	r21, 0x41	; 65
    1804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	8e 01       	movw	r16, r28
    180e:	0d 5b       	subi	r16, 0xBD	; 189
    1810:	1f 4f       	sbci	r17, 0xFF	; 255
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	f8 01       	movw	r30, r16
    1820:	91 83       	std	Z+1, r25	; 0x01
    1822:	80 83       	st	Z, r24
    1824:	1f c0       	rjmp	.+62     	; 0x1864 <LCD_voidIntit+0x122>
    1826:	fe 01       	movw	r30, r28
    1828:	ef 5b       	subi	r30, 0xBF	; 191
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	88 ec       	ldi	r24, 0xC8	; 200
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	91 83       	std	Z+1, r25	; 0x01
    1832:	80 83       	st	Z, r24
    1834:	fe 01       	movw	r30, r28
    1836:	ef 5b       	subi	r30, 0xBF	; 191
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	80 81       	ld	r24, Z
    183c:	91 81       	ldd	r25, Z+1	; 0x01
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	f1 f7       	brne	.-4      	; 0x183e <LCD_voidIntit+0xfc>
    1842:	fe 01       	movw	r30, r28
    1844:	ef 5b       	subi	r30, 0xBF	; 191
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	91 83       	std	Z+1, r25	; 0x01
    184a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184c:	de 01       	movw	r26, r28
    184e:	ad 5b       	subi	r26, 0xBD	; 189
    1850:	bf 4f       	sbci	r27, 0xFF	; 255
    1852:	fe 01       	movw	r30, r28
    1854:	ed 5b       	subi	r30, 0xBD	; 189
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	80 81       	ld	r24, Z
    185a:	91 81       	ldd	r25, Z+1	; 0x01
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	11 96       	adiw	r26, 0x01	; 1
    1860:	9c 93       	st	X, r25
    1862:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1864:	fe 01       	movw	r30, r28
    1866:	ed 5b       	subi	r30, 0xBD	; 189
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	d1 f6       	brne	.-76     	; 0x1826 <LCD_voidIntit+0xe4>
    1872:	24 c0       	rjmp	.+72     	; 0x18bc <LCD_voidIntit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1874:	8e 01       	movw	r16, r28
    1876:	0d 5b       	subi	r16, 0xBD	; 189
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	fe 01       	movw	r30, r28
    187c:	eb 5b       	subi	r30, 0xBB	; 187
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	60 81       	ld	r22, Z
    1882:	71 81       	ldd	r23, Z+1	; 0x01
    1884:	82 81       	ldd	r24, Z+2	; 0x02
    1886:	93 81       	ldd	r25, Z+3	; 0x03
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	f8 01       	movw	r30, r16
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
    1896:	fe 01       	movw	r30, r28
    1898:	ed 5b       	subi	r30, 0xBD	; 189
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 81       	ld	r24, Z
    189e:	91 81       	ldd	r25, Z+1	; 0x01
    18a0:	fe 01       	movw	r30, r28
    18a2:	ff 96       	adiw	r30, 0x3f	; 63
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	80 83       	st	Z, r24
    18a8:	fe 01       	movw	r30, r28
    18aa:	ff 96       	adiw	r30, 0x3f	; 63
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <LCD_voidIntit+0x16e>
    18b4:	fe 01       	movw	r30, r28
    18b6:	ff 96       	adiw	r30, 0x3f	; 63
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	80 83       	st	Z, r24
//send Entry Mode SET cmd 0b000001 I/D SH
//I/D: increase ->>right(default=1) | decrease--<<left 0
// SH: shifting right (SH=1&&I/D=0 )  |shifting left (SH=1&&I/D=1 ) | no shifting =0
#if LCD_u8_MODE==LCD_u8_MODE_8_BIT
	_delay_ms(35);
	LCD_SendCommand(MODE_8_FUNCTIONSET);
    18bc:	88 e3       	ldi	r24, 0x38	; 56
    18be:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_SendCommand>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a0 e2       	ldi	r26, 0x20	; 32
    18c8:	b2 e4       	ldi	r27, 0x42	; 66
    18ca:	8b af       	std	Y+59, r24	; 0x3b
    18cc:	9c af       	std	Y+60, r25	; 0x3c
    18ce:	ad af       	std	Y+61, r26	; 0x3d
    18d0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18d2:	6b ad       	ldd	r22, Y+59	; 0x3b
    18d4:	7c ad       	ldd	r23, Y+60	; 0x3c
    18d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    18d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    18da:	2b ea       	ldi	r18, 0xAB	; 171
    18dc:	3a ea       	ldi	r19, 0xAA	; 170
    18de:	4a e2       	ldi	r20, 0x2A	; 42
    18e0:	50 e4       	ldi	r21, 0x40	; 64
    18e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	8f ab       	std	Y+55, r24	; 0x37
    18ec:	98 af       	std	Y+56, r25	; 0x38
    18ee:	a9 af       	std	Y+57, r26	; 0x39
    18f0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    18f2:	6f a9       	ldd	r22, Y+55	; 0x37
    18f4:	78 ad       	ldd	r23, Y+56	; 0x38
    18f6:	89 ad       	ldd	r24, Y+57	; 0x39
    18f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1906:	88 23       	and	r24, r24
    1908:	1c f4       	brge	.+6      	; 0x1910 <LCD_voidIntit+0x1ce>
		__ticks = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	8e ab       	std	Y+54, r24	; 0x36
    190e:	91 c0       	rjmp	.+290    	; 0x1a32 <LCD_voidIntit+0x2f0>
	else if (__tmp > 255)
    1910:	6f a9       	ldd	r22, Y+55	; 0x37
    1912:	78 ad       	ldd	r23, Y+56	; 0x38
    1914:	89 ad       	ldd	r24, Y+57	; 0x39
    1916:	9a ad       	ldd	r25, Y+58	; 0x3a
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	4f e7       	ldi	r20, 0x7F	; 127
    191e:	53 e4       	ldi	r21, 0x43	; 67
    1920:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1924:	18 16       	cp	r1, r24
    1926:	0c f0       	brlt	.+2      	; 0x192a <LCD_voidIntit+0x1e8>
    1928:	7b c0       	rjmp	.+246    	; 0x1a20 <LCD_voidIntit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    192a:	6b ad       	ldd	r22, Y+59	; 0x3b
    192c:	7c ad       	ldd	r23, Y+60	; 0x3c
    192e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1930:	9e ad       	ldd	r25, Y+62	; 0x3e
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	4a e7       	ldi	r20, 0x7A	; 122
    1938:	54 e4       	ldi	r21, 0x44	; 68
    193a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	8a ab       	std	Y+50, r24	; 0x32
    1944:	9b ab       	std	Y+51, r25	; 0x33
    1946:	ac ab       	std	Y+52, r26	; 0x34
    1948:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194a:	6a a9       	ldd	r22, Y+50	; 0x32
    194c:	7b a9       	ldd	r23, Y+51	; 0x33
    194e:	8c a9       	ldd	r24, Y+52	; 0x34
    1950:	9d a9       	ldd	r25, Y+53	; 0x35
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	4a ef       	ldi	r20, 0xFA	; 250
    1958:	54 e4       	ldi	r21, 0x44	; 68
    195a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	8e a7       	std	Y+46, r24	; 0x2e
    1964:	9f a7       	std	Y+47, r25	; 0x2f
    1966:	a8 ab       	std	Y+48, r26	; 0x30
    1968:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    196a:	6e a5       	ldd	r22, Y+46	; 0x2e
    196c:	7f a5       	ldd	r23, Y+47	; 0x2f
    196e:	88 a9       	ldd	r24, Y+48	; 0x30
    1970:	99 a9       	ldd	r25, Y+49	; 0x31
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e8       	ldi	r20, 0x80	; 128
    1978:	5f e3       	ldi	r21, 0x3F	; 63
    197a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    197e:	88 23       	and	r24, r24
    1980:	2c f4       	brge	.+10     	; 0x198c <LCD_voidIntit+0x24a>
		__ticks = 1;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9d a7       	std	Y+45, r25	; 0x2d
    1988:	8c a7       	std	Y+44, r24	; 0x2c
    198a:	3f c0       	rjmp	.+126    	; 0x1a0a <LCD_voidIntit+0x2c8>
	else if (__tmp > 65535)
    198c:	6e a5       	ldd	r22, Y+46	; 0x2e
    198e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1990:	88 a9       	ldd	r24, Y+48	; 0x30
    1992:	99 a9       	ldd	r25, Y+49	; 0x31
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	3f ef       	ldi	r19, 0xFF	; 255
    1998:	4f e7       	ldi	r20, 0x7F	; 127
    199a:	57 e4       	ldi	r21, 0x47	; 71
    199c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19a0:	18 16       	cp	r1, r24
    19a2:	4c f5       	brge	.+82     	; 0x19f6 <LCD_voidIntit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a4:	6a a9       	ldd	r22, Y+50	; 0x32
    19a6:	7b a9       	ldd	r23, Y+51	; 0x33
    19a8:	8c a9       	ldd	r24, Y+52	; 0x34
    19aa:	9d a9       	ldd	r25, Y+53	; 0x35
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e2       	ldi	r20, 0x20	; 32
    19b2:	51 e4       	ldi	r21, 0x41	; 65
    19b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	bc 01       	movw	r22, r24
    19be:	cd 01       	movw	r24, r26
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9d a7       	std	Y+45, r25	; 0x2d
    19ca:	8c a7       	std	Y+44, r24	; 0x2c
    19cc:	0f c0       	rjmp	.+30     	; 0x19ec <LCD_voidIntit+0x2aa>
    19ce:	88 ec       	ldi	r24, 0xC8	; 200
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9b a7       	std	Y+43, r25	; 0x2b
    19d4:	8a a7       	std	Y+42, r24	; 0x2a
    19d6:	8a a5       	ldd	r24, Y+42	; 0x2a
    19d8:	9b a5       	ldd	r25, Y+43	; 0x2b
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <LCD_voidIntit+0x298>
    19de:	9b a7       	std	Y+43, r25	; 0x2b
    19e0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e2:	8c a5       	ldd	r24, Y+44	; 0x2c
    19e4:	9d a5       	ldd	r25, Y+45	; 0x2d
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	9d a7       	std	Y+45, r25	; 0x2d
    19ea:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ec:	8c a5       	ldd	r24, Y+44	; 0x2c
    19ee:	9d a5       	ldd	r25, Y+45	; 0x2d
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	69 f7       	brne	.-38     	; 0x19ce <LCD_voidIntit+0x28c>
    19f4:	24 c0       	rjmp	.+72     	; 0x1a3e <LCD_voidIntit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f6:	6e a5       	ldd	r22, Y+46	; 0x2e
    19f8:	7f a5       	ldd	r23, Y+47	; 0x2f
    19fa:	88 a9       	ldd	r24, Y+48	; 0x30
    19fc:	99 a9       	ldd	r25, Y+49	; 0x31
    19fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9d a7       	std	Y+45, r25	; 0x2d
    1a08:	8c a7       	std	Y+44, r24	; 0x2c
    1a0a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a0c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a0e:	99 a7       	std	Y+41, r25	; 0x29
    1a10:	88 a7       	std	Y+40, r24	; 0x28
    1a12:	88 a5       	ldd	r24, Y+40	; 0x28
    1a14:	99 a5       	ldd	r25, Y+41	; 0x29
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <LCD_voidIntit+0x2d4>
    1a1a:	99 a7       	std	Y+41, r25	; 0x29
    1a1c:	88 a7       	std	Y+40, r24	; 0x28
    1a1e:	0f c0       	rjmp	.+30     	; 0x1a3e <LCD_voidIntit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a20:	6f a9       	ldd	r22, Y+55	; 0x37
    1a22:	78 ad       	ldd	r23, Y+56	; 0x38
    1a24:	89 ad       	ldd	r24, Y+57	; 0x39
    1a26:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8e ab       	std	Y+54, r24	; 0x36
    1a32:	8e a9       	ldd	r24, Y+54	; 0x36
    1a34:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a36:	8f a1       	ldd	r24, Y+39	; 0x27
    1a38:	8a 95       	dec	r24
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <LCD_voidIntit+0x2f6>
    1a3c:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_SendCommand(MODE_8_DISPLAY_ON_OFF);
    1a3e:	8e e0       	ldi	r24, 0x0E	; 14
    1a40:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_SendCommand>
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	a0 e2       	ldi	r26, 0x20	; 32
    1a4a:	b2 e4       	ldi	r27, 0x42	; 66
    1a4c:	8b a3       	std	Y+35, r24	; 0x23
    1a4e:	9c a3       	std	Y+36, r25	; 0x24
    1a50:	ad a3       	std	Y+37, r26	; 0x25
    1a52:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a54:	6b a1       	ldd	r22, Y+35	; 0x23
    1a56:	7c a1       	ldd	r23, Y+36	; 0x24
    1a58:	8d a1       	ldd	r24, Y+37	; 0x25
    1a5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a5c:	2b ea       	ldi	r18, 0xAB	; 171
    1a5e:	3a ea       	ldi	r19, 0xAA	; 170
    1a60:	4a e2       	ldi	r20, 0x2A	; 42
    1a62:	50 e4       	ldi	r21, 0x40	; 64
    1a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	8f 8f       	std	Y+31, r24	; 0x1f
    1a6e:	98 a3       	std	Y+32, r25	; 0x20
    1a70:	a9 a3       	std	Y+33, r26	; 0x21
    1a72:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1a74:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a76:	78 a1       	ldd	r23, Y+32	; 0x20
    1a78:	89 a1       	ldd	r24, Y+33	; 0x21
    1a7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e8       	ldi	r20, 0x80	; 128
    1a82:	5f e3       	ldi	r21, 0x3F	; 63
    1a84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a88:	88 23       	and	r24, r24
    1a8a:	1c f4       	brge	.+6      	; 0x1a92 <LCD_voidIntit+0x350>
		__ticks = 1;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	8e 8f       	std	Y+30, r24	; 0x1e
    1a90:	91 c0       	rjmp	.+290    	; 0x1bb4 <LCD_voidIntit+0x472>
	else if (__tmp > 255)
    1a92:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a94:	78 a1       	ldd	r23, Y+32	; 0x20
    1a96:	89 a1       	ldd	r24, Y+33	; 0x21
    1a98:	9a a1       	ldd	r25, Y+34	; 0x22
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	4f e7       	ldi	r20, 0x7F	; 127
    1aa0:	53 e4       	ldi	r21, 0x43	; 67
    1aa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa6:	18 16       	cp	r1, r24
    1aa8:	0c f0       	brlt	.+2      	; 0x1aac <LCD_voidIntit+0x36a>
    1aaa:	7b c0       	rjmp	.+246    	; 0x1ba2 <LCD_voidIntit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1aac:	6b a1       	ldd	r22, Y+35	; 0x23
    1aae:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ab2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	4a e7       	ldi	r20, 0x7A	; 122
    1aba:	54 e4       	ldi	r21, 0x44	; 68
    1abc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	8a 8f       	std	Y+26, r24	; 0x1a
    1ac6:	9b 8f       	std	Y+27, r25	; 0x1b
    1ac8:	ac 8f       	std	Y+28, r26	; 0x1c
    1aca:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1acc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ace:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ad0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ad2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	4a ef       	ldi	r20, 0xFA	; 250
    1ada:	54 e4       	ldi	r21, 0x44	; 68
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	8e 8b       	std	Y+22, r24	; 0x16
    1ae6:	9f 8b       	std	Y+23, r25	; 0x17
    1ae8:	a8 8f       	std	Y+24, r26	; 0x18
    1aea:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1aec:	6e 89       	ldd	r22, Y+22	; 0x16
    1aee:	7f 89       	ldd	r23, Y+23	; 0x17
    1af0:	88 8d       	ldd	r24, Y+24	; 0x18
    1af2:	99 8d       	ldd	r25, Y+25	; 0x19
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e8       	ldi	r20, 0x80	; 128
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b00:	88 23       	and	r24, r24
    1b02:	2c f4       	brge	.+10     	; 0x1b0e <LCD_voidIntit+0x3cc>
		__ticks = 1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9d 8b       	std	Y+21, r25	; 0x15
    1b0a:	8c 8b       	std	Y+20, r24	; 0x14
    1b0c:	3f c0       	rjmp	.+126    	; 0x1b8c <LCD_voidIntit+0x44a>
	else if (__tmp > 65535)
    1b0e:	6e 89       	ldd	r22, Y+22	; 0x16
    1b10:	7f 89       	ldd	r23, Y+23	; 0x17
    1b12:	88 8d       	ldd	r24, Y+24	; 0x18
    1b14:	99 8d       	ldd	r25, Y+25	; 0x19
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	3f ef       	ldi	r19, 0xFF	; 255
    1b1a:	4f e7       	ldi	r20, 0x7F	; 127
    1b1c:	57 e4       	ldi	r21, 0x47	; 71
    1b1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b22:	18 16       	cp	r1, r24
    1b24:	4c f5       	brge	.+82     	; 0x1b78 <LCD_voidIntit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b26:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b28:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e2       	ldi	r20, 0x20	; 32
    1b34:	51 e4       	ldi	r21, 0x41	; 65
    1b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9d 8b       	std	Y+21, r25	; 0x15
    1b4c:	8c 8b       	std	Y+20, r24	; 0x14
    1b4e:	0f c0       	rjmp	.+30     	; 0x1b6e <LCD_voidIntit+0x42c>
    1b50:	88 ec       	ldi	r24, 0xC8	; 200
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9b 8b       	std	Y+19, r25	; 0x13
    1b56:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b58:	8a 89       	ldd	r24, Y+18	; 0x12
    1b5a:	9b 89       	ldd	r25, Y+19	; 0x13
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <LCD_voidIntit+0x41a>
    1b60:	9b 8b       	std	Y+19, r25	; 0x13
    1b62:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b64:	8c 89       	ldd	r24, Y+20	; 0x14
    1b66:	9d 89       	ldd	r25, Y+21	; 0x15
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	9d 8b       	std	Y+21, r25	; 0x15
    1b6c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6e:	8c 89       	ldd	r24, Y+20	; 0x14
    1b70:	9d 89       	ldd	r25, Y+21	; 0x15
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	69 f7       	brne	.-38     	; 0x1b50 <LCD_voidIntit+0x40e>
    1b76:	24 c0       	rjmp	.+72     	; 0x1bc0 <LCD_voidIntit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b78:	6e 89       	ldd	r22, Y+22	; 0x16
    1b7a:	7f 89       	ldd	r23, Y+23	; 0x17
    1b7c:	88 8d       	ldd	r24, Y+24	; 0x18
    1b7e:	99 8d       	ldd	r25, Y+25	; 0x19
    1b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	9d 8b       	std	Y+21, r25	; 0x15
    1b8a:	8c 8b       	std	Y+20, r24	; 0x14
    1b8c:	8c 89       	ldd	r24, Y+20	; 0x14
    1b8e:	9d 89       	ldd	r25, Y+21	; 0x15
    1b90:	99 8b       	std	Y+17, r25	; 0x11
    1b92:	88 8b       	std	Y+16, r24	; 0x10
    1b94:	88 89       	ldd	r24, Y+16	; 0x10
    1b96:	99 89       	ldd	r25, Y+17	; 0x11
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <LCD_voidIntit+0x456>
    1b9c:	99 8b       	std	Y+17, r25	; 0x11
    1b9e:	88 8b       	std	Y+16, r24	; 0x10
    1ba0:	0f c0       	rjmp	.+30     	; 0x1bc0 <LCD_voidIntit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ba2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ba4:	78 a1       	ldd	r23, Y+32	; 0x20
    1ba6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba8:	9a a1       	ldd	r25, Y+34	; 0x22
    1baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8e 8f       	std	Y+30, r24	; 0x1e
    1bb4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bb6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bba:	8a 95       	dec	r24
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <LCD_voidIntit+0x478>
    1bbe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_SendCommand(MODE_8_CLEAR);
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_SendCommand>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	a0 e0       	ldi	r26, 0x00	; 0
    1bcc:	b0 e4       	ldi	r27, 0x40	; 64
    1bce:	8b 87       	std	Y+11, r24	; 0x0b
    1bd0:	9c 87       	std	Y+12, r25	; 0x0c
    1bd2:	ad 87       	std	Y+13, r26	; 0x0d
    1bd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	4a ef       	ldi	r20, 0xFA	; 250
    1be4:	54 e4       	ldi	r21, 0x44	; 68
    1be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	8f 83       	std	Y+7, r24	; 0x07
    1bf0:	98 87       	std	Y+8, r25	; 0x08
    1bf2:	a9 87       	std	Y+9, r26	; 0x09
    1bf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf8:	78 85       	ldd	r23, Y+8	; 0x08
    1bfa:	89 85       	ldd	r24, Y+9	; 0x09
    1bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e8       	ldi	r20, 0x80	; 128
    1c04:	5f e3       	ldi	r21, 0x3F	; 63
    1c06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c0a:	88 23       	and	r24, r24
    1c0c:	2c f4       	brge	.+10     	; 0x1c18 <LCD_voidIntit+0x4d6>
		__ticks = 1;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	9e 83       	std	Y+6, r25	; 0x06
    1c14:	8d 83       	std	Y+5, r24	; 0x05
    1c16:	3f c0       	rjmp	.+126    	; 0x1c96 <LCD_voidIntit+0x554>
	else if (__tmp > 65535)
    1c18:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1a:	78 85       	ldd	r23, Y+8	; 0x08
    1c1c:	89 85       	ldd	r24, Y+9	; 0x09
    1c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	3f ef       	ldi	r19, 0xFF	; 255
    1c24:	4f e7       	ldi	r20, 0x7F	; 127
    1c26:	57 e4       	ldi	r21, 0x47	; 71
    1c28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c2c:	18 16       	cp	r1, r24
    1c2e:	4c f5       	brge	.+82     	; 0x1c82 <LCD_voidIntit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e2       	ldi	r20, 0x20	; 32
    1c3e:	51 e4       	ldi	r21, 0x41	; 65
    1c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	9e 83       	std	Y+6, r25	; 0x06
    1c56:	8d 83       	std	Y+5, r24	; 0x05
    1c58:	0f c0       	rjmp	.+30     	; 0x1c78 <LCD_voidIntit+0x536>
    1c5a:	88 ec       	ldi	r24, 0xC8	; 200
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	9c 83       	std	Y+4, r25	; 0x04
    1c60:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_voidIntit+0x524>
    1c6a:	9c 83       	std	Y+4, r25	; 0x04
    1c6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c70:	9e 81       	ldd	r25, Y+6	; 0x06
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c78:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	69 f7       	brne	.-38     	; 0x1c5a <LCD_voidIntit+0x518>
    1c80:	14 c0       	rjmp	.+40     	; 0x1caa <LCD_voidIntit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c82:	6f 81       	ldd	r22, Y+7	; 0x07
    1c84:	78 85       	ldd	r23, Y+8	; 0x08
    1c86:	89 85       	ldd	r24, Y+9	; 0x09
    1c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	9e 83       	std	Y+6, r25	; 0x06
    1c94:	8d 83       	std	Y+5, r24	; 0x05
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9a:	9a 83       	std	Y+2, r25	; 0x02
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	f1 f7       	brne	.-4      	; 0x1ca2 <LCD_voidIntit+0x560>
    1ca6:	9a 83       	std	Y+2, r25	; 0x02
    1ca8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_SendCommand( MODE_8_ENTRYMODESET);
    1caa:	86 e0       	ldi	r24, 0x06	; 6
    1cac:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_SendCommand>
	 LCD_SendCommand(MODE_4_ENTRYMODESET_P2);

#endif


}
    1cb0:	c4 5b       	subi	r28, 0xB4	; 180
    1cb2:	df 4f       	sbci	r29, 0xFF	; 255
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	1f 91       	pop	r17
    1cc4:	0f 91       	pop	r16
    1cc6:	08 95       	ret

00001cc8 <LCD_SendCommand>:
void LCD_SendCommand(u8 Copy_u8Command){
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	69 97       	sbiw	r28, 0x19	; 25
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	89 8f       	std	Y+25, r24	; 0x19
//write command
//enable 1
//enable 0 to make pulse

#if LCD_u8_MODE==LCD_u8_MODE_8_BIT
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	40 e0       	ldi	r20, 0x00	; 0
    1ce4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1ce8:	82 e0       	ldi	r24, 0x02	; 2
    1cea:	61 e0       	ldi	r22, 0x01	; 1
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Command);
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf6:	0e 94 d6 09 	call	0x13ac	; 0x13ac <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	62 e0       	ldi	r22, 0x02	; 2
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	a0 e8       	ldi	r26, 0x80	; 128
    1d0a:	bf e3       	ldi	r27, 0x3F	; 63
    1d0c:	8d 8b       	std	Y+21, r24	; 0x15
    1d0e:	9e 8b       	std	Y+22, r25	; 0x16
    1d10:	af 8b       	std	Y+23, r26	; 0x17
    1d12:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d14:	6d 89       	ldd	r22, Y+21	; 0x15
    1d16:	7e 89       	ldd	r23, Y+22	; 0x16
    1d18:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1c:	2b ea       	ldi	r18, 0xAB	; 171
    1d1e:	3a ea       	ldi	r19, 0xAA	; 170
    1d20:	4a e2       	ldi	r20, 0x2A	; 42
    1d22:	50 e4       	ldi	r21, 0x40	; 64
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	89 8b       	std	Y+17, r24	; 0x11
    1d2e:	9a 8b       	std	Y+18, r25	; 0x12
    1d30:	ab 8b       	std	Y+19, r26	; 0x13
    1d32:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d34:	69 89       	ldd	r22, Y+17	; 0x11
    1d36:	7a 89       	ldd	r23, Y+18	; 0x12
    1d38:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	1c f4       	brge	.+6      	; 0x1d52 <LCD_SendCommand+0x8a>
		__ticks = 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	88 8b       	std	Y+16, r24	; 0x10
    1d50:	91 c0       	rjmp	.+290    	; 0x1e74 <LCD_SendCommand+0x1ac>
	else if (__tmp > 255)
    1d52:	69 89       	ldd	r22, Y+17	; 0x11
    1d54:	7a 89       	ldd	r23, Y+18	; 0x12
    1d56:	8b 89       	ldd	r24, Y+19	; 0x13
    1d58:	9c 89       	ldd	r25, Y+20	; 0x14
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4f e7       	ldi	r20, 0x7F	; 127
    1d60:	53 e4       	ldi	r21, 0x43	; 67
    1d62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d66:	18 16       	cp	r1, r24
    1d68:	0c f0       	brlt	.+2      	; 0x1d6c <LCD_SendCommand+0xa4>
    1d6a:	7b c0       	rjmp	.+246    	; 0x1e62 <LCD_SendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1d6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d70:	8f 89       	ldd	r24, Y+23	; 0x17
    1d72:	98 8d       	ldd	r25, Y+24	; 0x18
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4a e7       	ldi	r20, 0x7A	; 122
    1d7a:	54 e4       	ldi	r21, 0x44	; 68
    1d7c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	8c 87       	std	Y+12, r24	; 0x0c
    1d86:	9d 87       	std	Y+13, r25	; 0x0d
    1d88:	ae 87       	std	Y+14, r26	; 0x0e
    1d8a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d8e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d90:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d92:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	4a ef       	ldi	r20, 0xFA	; 250
    1d9a:	54 e4       	ldi	r21, 0x44	; 68
    1d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	88 87       	std	Y+8, r24	; 0x08
    1da6:	99 87       	std	Y+9, r25	; 0x09
    1da8:	aa 87       	std	Y+10, r26	; 0x0a
    1daa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1dac:	68 85       	ldd	r22, Y+8	; 0x08
    1dae:	79 85       	ldd	r23, Y+9	; 0x09
    1db0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1db2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e8       	ldi	r20, 0x80	; 128
    1dba:	5f e3       	ldi	r21, 0x3F	; 63
    1dbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dc0:	88 23       	and	r24, r24
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <LCD_SendCommand+0x106>
		__ticks = 1;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9f 83       	std	Y+7, r25	; 0x07
    1dca:	8e 83       	std	Y+6, r24	; 0x06
    1dcc:	3f c0       	rjmp	.+126    	; 0x1e4c <LCD_SendCommand+0x184>
	else if (__tmp > 65535)
    1dce:	68 85       	ldd	r22, Y+8	; 0x08
    1dd0:	79 85       	ldd	r23, Y+9	; 0x09
    1dd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	3f ef       	ldi	r19, 0xFF	; 255
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	4c f5       	brge	.+82     	; 0x1e38 <LCD_SendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1de8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dea:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dec:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e2       	ldi	r20, 0x20	; 32
    1df4:	51 e4       	ldi	r21, 0x41	; 65
    1df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9f 83       	std	Y+7, r25	; 0x07
    1e0c:	8e 83       	std	Y+6, r24	; 0x06
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <LCD_SendCommand+0x166>
    1e10:	88 ec       	ldi	r24, 0xC8	; 200
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	9d 83       	std	Y+5, r25	; 0x05
    1e16:	8c 83       	std	Y+4, r24	; 0x04
    1e18:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <LCD_SendCommand+0x154>
    1e20:	9d 83       	std	Y+5, r25	; 0x05
    1e22:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e24:	8e 81       	ldd	r24, Y+6	; 0x06
    1e26:	9f 81       	ldd	r25, Y+7	; 0x07
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	9f 83       	std	Y+7, r25	; 0x07
    1e2c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e30:	9f 81       	ldd	r25, Y+7	; 0x07
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	69 f7       	brne	.-38     	; 0x1e10 <LCD_SendCommand+0x148>
    1e36:	24 c0       	rjmp	.+72     	; 0x1e80 <LCD_SendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e38:	68 85       	ldd	r22, Y+8	; 0x08
    1e3a:	79 85       	ldd	r23, Y+9	; 0x09
    1e3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9f 83       	std	Y+7, r25	; 0x07
    1e4a:	8e 83       	std	Y+6, r24	; 0x06
    1e4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e50:	9b 83       	std	Y+3, r25	; 0x03
    1e52:	8a 83       	std	Y+2, r24	; 0x02
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	9b 81       	ldd	r25, Y+3	; 0x03
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <LCD_SendCommand+0x190>
    1e5c:	9b 83       	std	Y+3, r25	; 0x03
    1e5e:	8a 83       	std	Y+2, r24	; 0x02
    1e60:	0f c0       	rjmp	.+30     	; 0x1e80 <LCD_SendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e62:	69 89       	ldd	r22, Y+17	; 0x11
    1e64:	7a 89       	ldd	r23, Y+18	; 0x12
    1e66:	8b 89       	ldd	r24, Y+19	; 0x13
    1e68:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	88 8b       	std	Y+16, r24	; 0x10
    1e74:	88 89       	ldd	r24, Y+16	; 0x10
    1e76:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	8a 95       	dec	r24
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <LCD_SendCommand+0x1b2>
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	62 e0       	ldi	r22, 0x02	; 2
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    _delay_us(1);  // Wait for at least 1us
    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_EN_PIN, DIO_u8_LOW);
    _delay_us(40);

#endif
}
    1e8a:	69 96       	adiw	r28, 0x19	; 25
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <LCD_SendChar>:


void LCD_SendChar(u8 Copy_u8Char){
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	69 97       	sbiw	r28, 0x19	; 25
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	89 8f       	std	Y+25, r24	; 0x19
	//rw   0 write
	//write command
	//enable 1
	//enable 0 to make pulse
#if LCD_u8_MODE==LCD_u8_MODE_8_BIT
		DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	60 e0       	ldi	r22, 0x00	; 0
    1eb6:	41 e0       	ldi	r20, 0x01	; 1
    1eb8:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1ebc:	82 e0       	ldi	r24, 0x02	; 2
    1ebe:	61 e0       	ldi	r22, 0x01	; 1
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
		DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eca:	0e 94 d6 09 	call	0x13ac	; 0x13ac <DIO_u8SetPortValue>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    1ece:	82 e0       	ldi	r24, 0x02	; 2
    1ed0:	62 e0       	ldi	r22, 0x02	; 2
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	a0 e8       	ldi	r26, 0x80	; 128
    1ede:	bf e3       	ldi	r27, 0x3F	; 63
    1ee0:	8d 8b       	std	Y+21, r24	; 0x15
    1ee2:	9e 8b       	std	Y+22, r25	; 0x16
    1ee4:	af 8b       	std	Y+23, r26	; 0x17
    1ee6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ee8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eea:	7e 89       	ldd	r23, Y+22	; 0x16
    1eec:	8f 89       	ldd	r24, Y+23	; 0x17
    1eee:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef0:	2b ea       	ldi	r18, 0xAB	; 171
    1ef2:	3a ea       	ldi	r19, 0xAA	; 170
    1ef4:	4a e2       	ldi	r20, 0x2A	; 42
    1ef6:	50 e4       	ldi	r21, 0x40	; 64
    1ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	89 8b       	std	Y+17, r24	; 0x11
    1f02:	9a 8b       	std	Y+18, r25	; 0x12
    1f04:	ab 8b       	std	Y+19, r26	; 0x13
    1f06:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f08:	69 89       	ldd	r22, Y+17	; 0x11
    1f0a:	7a 89       	ldd	r23, Y+18	; 0x12
    1f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e8       	ldi	r20, 0x80	; 128
    1f16:	5f e3       	ldi	r21, 0x3F	; 63
    1f18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f1c:	88 23       	and	r24, r24
    1f1e:	1c f4       	brge	.+6      	; 0x1f26 <LCD_SendChar+0x8a>
		__ticks = 1;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	88 8b       	std	Y+16, r24	; 0x10
    1f24:	91 c0       	rjmp	.+290    	; 0x2048 <LCD_SendChar+0x1ac>
	else if (__tmp > 255)
    1f26:	69 89       	ldd	r22, Y+17	; 0x11
    1f28:	7a 89       	ldd	r23, Y+18	; 0x12
    1f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	4f e7       	ldi	r20, 0x7F	; 127
    1f34:	53 e4       	ldi	r21, 0x43	; 67
    1f36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f3a:	18 16       	cp	r1, r24
    1f3c:	0c f0       	brlt	.+2      	; 0x1f40 <LCD_SendChar+0xa4>
    1f3e:	7b c0       	rjmp	.+246    	; 0x2036 <LCD_SendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1f40:	6d 89       	ldd	r22, Y+21	; 0x15
    1f42:	7e 89       	ldd	r23, Y+22	; 0x16
    1f44:	8f 89       	ldd	r24, Y+23	; 0x17
    1f46:	98 8d       	ldd	r25, Y+24	; 0x18
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4a e7       	ldi	r20, 0x7A	; 122
    1f4e:	54 e4       	ldi	r21, 0x44	; 68
    1f50:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	8c 87       	std	Y+12, r24	; 0x0c
    1f5a:	9d 87       	std	Y+13, r25	; 0x0d
    1f5c:	ae 87       	std	Y+14, r26	; 0x0e
    1f5e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f60:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f62:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f64:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f66:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	4a ef       	ldi	r20, 0xFA	; 250
    1f6e:	54 e4       	ldi	r21, 0x44	; 68
    1f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	88 87       	std	Y+8, r24	; 0x08
    1f7a:	99 87       	std	Y+9, r25	; 0x09
    1f7c:	aa 87       	std	Y+10, r26	; 0x0a
    1f7e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f80:	68 85       	ldd	r22, Y+8	; 0x08
    1f82:	79 85       	ldd	r23, Y+9	; 0x09
    1f84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f86:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e8       	ldi	r20, 0x80	; 128
    1f8e:	5f e3       	ldi	r21, 0x3F	; 63
    1f90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f94:	88 23       	and	r24, r24
    1f96:	2c f4       	brge	.+10     	; 0x1fa2 <LCD_SendChar+0x106>
		__ticks = 1;
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	9f 83       	std	Y+7, r25	; 0x07
    1f9e:	8e 83       	std	Y+6, r24	; 0x06
    1fa0:	3f c0       	rjmp	.+126    	; 0x2020 <LCD_SendChar+0x184>
	else if (__tmp > 65535)
    1fa2:	68 85       	ldd	r22, Y+8	; 0x08
    1fa4:	79 85       	ldd	r23, Y+9	; 0x09
    1fa6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fa8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	3f ef       	ldi	r19, 0xFF	; 255
    1fae:	4f e7       	ldi	r20, 0x7F	; 127
    1fb0:	57 e4       	ldi	r21, 0x47	; 71
    1fb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb6:	18 16       	cp	r1, r24
    1fb8:	4c f5       	brge	.+82     	; 0x200c <LCD_SendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fba:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fbc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e2       	ldi	r20, 0x20	; 32
    1fc8:	51 e4       	ldi	r21, 0x41	; 65
    1fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	cd 01       	movw	r24, r26
    1fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	9f 83       	std	Y+7, r25	; 0x07
    1fe0:	8e 83       	std	Y+6, r24	; 0x06
    1fe2:	0f c0       	rjmp	.+30     	; 0x2002 <LCD_SendChar+0x166>
    1fe4:	88 ec       	ldi	r24, 0xC8	; 200
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	9d 83       	std	Y+5, r25	; 0x05
    1fea:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
    1fee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <LCD_SendChar+0x154>
    1ff4:	9d 83       	std	Y+5, r25	; 0x05
    1ff6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff8:	8e 81       	ldd	r24, Y+6	; 0x06
    1ffa:	9f 81       	ldd	r25, Y+7	; 0x07
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	9f 83       	std	Y+7, r25	; 0x07
    2000:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2002:	8e 81       	ldd	r24, Y+6	; 0x06
    2004:	9f 81       	ldd	r25, Y+7	; 0x07
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	69 f7       	brne	.-38     	; 0x1fe4 <LCD_SendChar+0x148>
    200a:	24 c0       	rjmp	.+72     	; 0x2054 <LCD_SendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200c:	68 85       	ldd	r22, Y+8	; 0x08
    200e:	79 85       	ldd	r23, Y+9	; 0x09
    2010:	8a 85       	ldd	r24, Y+10	; 0x0a
    2012:	9b 85       	ldd	r25, Y+11	; 0x0b
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9f 83       	std	Y+7, r25	; 0x07
    201e:	8e 83       	std	Y+6, r24	; 0x06
    2020:	8e 81       	ldd	r24, Y+6	; 0x06
    2022:	9f 81       	ldd	r25, Y+7	; 0x07
    2024:	9b 83       	std	Y+3, r25	; 0x03
    2026:	8a 83       	std	Y+2, r24	; 0x02
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	9b 81       	ldd	r25, Y+3	; 0x03
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <LCD_SendChar+0x190>
    2030:	9b 83       	std	Y+3, r25	; 0x03
    2032:	8a 83       	std	Y+2, r24	; 0x02
    2034:	0f c0       	rjmp	.+30     	; 0x2054 <LCD_SendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2036:	69 89       	ldd	r22, Y+17	; 0x11
    2038:	7a 89       	ldd	r23, Y+18	; 0x12
    203a:	8b 89       	ldd	r24, Y+19	; 0x13
    203c:	9c 89       	ldd	r25, Y+20	; 0x14
    203e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	88 8b       	std	Y+16, r24	; 0x10
    2048:	88 89       	ldd	r24, Y+16	; 0x10
    204a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	8a 95       	dec	r24
    2050:	f1 f7       	brne	.-4      	; 0x204e <LCD_SendChar+0x1b2>
    2052:	89 83       	std	Y+1, r24	; 0x01
	    _delay_us(1);
	    DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	62 e0       	ldi	r22, 0x02	; 2
    2058:	40 e0       	ldi	r20, 0x00	; 0
    205a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_u8SetPinValue>
	       DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_EN_PIN, DIO_u8_HIGH);
	       _delay_us(2);
	       DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_EN_PIN, DIO_u8_LOW);

#endif
}
    205e:	69 96       	adiw	r28, 0x19	; 25
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	cd bf       	out	0x3d, r28	; 61
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <LCD_SendString>:


void LCD_SendString ( const u8 *Copy_pu8arr){
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	00 d0       	rcall	.+0      	; 0x2076 <LCD_SendString+0x6>
    2076:	0f 92       	push	r0
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	9b 83       	std	Y+3, r25	; 0x03
    207e:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_pu8arr!=NULL){
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	9b 81       	ldd	r25, Y+3	; 0x03
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	d9 f0       	breq	.+54     	; 0x20be <LCD_SendString+0x4e>
	u8 i=0;
    2088:	19 82       	std	Y+1, r1	; 0x01
    208a:	0e c0       	rjmp	.+28     	; 0x20a8 <LCD_SendString+0x38>
		while(Copy_pu8arr[i]!='\0'){
			LCD_SendChar(Copy_pu8arr[i]);
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	9b 81       	ldd	r25, Y+3	; 0x03
    2096:	fc 01       	movw	r30, r24
    2098:	e2 0f       	add	r30, r18
    209a:	f3 1f       	adc	r31, r19
    209c:	80 81       	ld	r24, Z
    209e:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <LCD_SendChar>
			i++;
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	8f 5f       	subi	r24, 0xFF	; 255
    20a6:	89 83       	std	Y+1, r24	; 0x01


void LCD_SendString ( const u8 *Copy_pu8arr){
	if(Copy_pu8arr!=NULL){
	u8 i=0;
		while(Copy_pu8arr[i]!='\0'){
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	9b 81       	ldd	r25, Y+3	; 0x03
    20b2:	fc 01       	movw	r30, r24
    20b4:	e2 0f       	add	r30, r18
    20b6:	f3 1f       	adc	r31, r19
    20b8:	80 81       	ld	r24, Z
    20ba:	88 23       	and	r24, r24
    20bc:	39 f7       	brne	.-50     	; 0x208c <LCD_SendString+0x1c>
			LCD_SendChar(Copy_pu8arr[i]);
			i++;
		}
	}
}
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <LCD_SendNumber>:


void LCD_SendNumber(s32 Copy_u8Number) {
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	63 97       	sbiw	r28, 0x13	; 19
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	68 8b       	std	Y+16, r22	; 0x10
    20e0:	79 8b       	std	Y+17, r23	; 0x11
    20e2:	8a 8b       	std	Y+18, r24	; 0x12
    20e4:	9b 8b       	std	Y+19, r25	; 0x13
    u8 arr[12];
    u8 i = 0;
    20e6:	1b 82       	std	Y+3, r1	; 0x03


    if (Copy_u8Number == 0) {
    20e8:	88 89       	ldd	r24, Y+16	; 0x10
    20ea:	99 89       	ldd	r25, Y+17	; 0x11
    20ec:	aa 89       	ldd	r26, Y+18	; 0x12
    20ee:	bb 89       	ldd	r27, Y+19	; 0x13
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	a1 05       	cpc	r26, r1
    20f4:	b1 05       	cpc	r27, r1
    20f6:	21 f4       	brne	.+8      	; 0x2100 <LCD_SendNumber+0x36>
        LCD_SendChar('0');
    20f8:	80 e3       	ldi	r24, 0x30	; 48
    20fa:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <LCD_SendChar>
    20fe:	70 c0       	rjmp	.+224    	; 0x21e0 <LCD_SendNumber+0x116>
        return;
    }

    if (Copy_u8Number < 0) {
    2100:	88 89       	ldd	r24, Y+16	; 0x10
    2102:	99 89       	ldd	r25, Y+17	; 0x11
    2104:	aa 89       	ldd	r26, Y+18	; 0x12
    2106:	bb 89       	ldd	r27, Y+19	; 0x13
    2108:	bb 23       	and	r27, r27
    210a:	0c f0       	brlt	.+2      	; 0x210e <LCD_SendNumber+0x44>
    210c:	43 c0       	rjmp	.+134    	; 0x2194 <LCD_SendNumber+0xca>
        LCD_SendChar('-');
    210e:	8d e2       	ldi	r24, 0x2D	; 45
    2110:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <LCD_SendChar>
        Copy_u8Number = -1*Copy_u8Number;
    2114:	88 89       	ldd	r24, Y+16	; 0x10
    2116:	99 89       	ldd	r25, Y+17	; 0x11
    2118:	aa 89       	ldd	r26, Y+18	; 0x12
    211a:	bb 89       	ldd	r27, Y+19	; 0x13
    211c:	b0 95       	com	r27
    211e:	a0 95       	com	r26
    2120:	90 95       	com	r25
    2122:	81 95       	neg	r24
    2124:	9f 4f       	sbci	r25, 0xFF	; 255
    2126:	af 4f       	sbci	r26, 0xFF	; 255
    2128:	bf 4f       	sbci	r27, 0xFF	; 255
    212a:	88 8b       	std	Y+16, r24	; 0x10
    212c:	99 8b       	std	Y+17, r25	; 0x11
    212e:	aa 8b       	std	Y+18, r26	; 0x12
    2130:	bb 8b       	std	Y+19, r27	; 0x13
    2132:	30 c0       	rjmp	.+96     	; 0x2194 <LCD_SendNumber+0xca>
    }


    while (Copy_u8Number != 0) {
        u8 LastDigit = Copy_u8Number % 10;
    2134:	88 89       	ldd	r24, Y+16	; 0x10
    2136:	99 89       	ldd	r25, Y+17	; 0x11
    2138:	aa 89       	ldd	r26, Y+18	; 0x12
    213a:	bb 89       	ldd	r27, Y+19	; 0x13
    213c:	2a e0       	ldi	r18, 0x0A	; 10
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	50 e0       	ldi	r21, 0x00	; 0
    2144:	bc 01       	movw	r22, r24
    2146:	cd 01       	movw	r24, r26
    2148:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__divmodsi4>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	8a 83       	std	Y+2, r24	; 0x02
        arr[i] = (LastDigit + '0');
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	28 2f       	mov	r18, r24
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	48 2f       	mov	r20, r24
    215c:	40 5d       	subi	r20, 0xD0	; 208
    215e:	ce 01       	movw	r24, r28
    2160:	04 96       	adiw	r24, 0x04	; 4
    2162:	fc 01       	movw	r30, r24
    2164:	e2 0f       	add	r30, r18
    2166:	f3 1f       	adc	r31, r19
    2168:	40 83       	st	Z, r20
        Copy_u8Number /= 10;
    216a:	88 89       	ldd	r24, Y+16	; 0x10
    216c:	99 89       	ldd	r25, Y+17	; 0x11
    216e:	aa 89       	ldd	r26, Y+18	; 0x12
    2170:	bb 89       	ldd	r27, Y+19	; 0x13
    2172:	2a e0       	ldi	r18, 0x0A	; 10
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__divmodsi4>
    2182:	da 01       	movw	r26, r20
    2184:	c9 01       	movw	r24, r18
    2186:	88 8b       	std	Y+16, r24	; 0x10
    2188:	99 8b       	std	Y+17, r25	; 0x11
    218a:	aa 8b       	std	Y+18, r26	; 0x12
    218c:	bb 8b       	std	Y+19, r27	; 0x13
        i++;
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	8f 5f       	subi	r24, 0xFF	; 255
    2192:	8b 83       	std	Y+3, r24	; 0x03
        LCD_SendChar('-');
        Copy_u8Number = -1*Copy_u8Number;
    }


    while (Copy_u8Number != 0) {
    2194:	88 89       	ldd	r24, Y+16	; 0x10
    2196:	99 89       	ldd	r25, Y+17	; 0x11
    2198:	aa 89       	ldd	r26, Y+18	; 0x12
    219a:	bb 89       	ldd	r27, Y+19	; 0x13
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	a1 05       	cpc	r26, r1
    21a0:	b1 05       	cpc	r27, r1
    21a2:	41 f6       	brne	.-112    	; 0x2134 <LCD_SendNumber+0x6a>
        arr[i] = (LastDigit + '0');
        Copy_u8Number /= 10;
        i++;
    }

    for (u8 j = 0; j < i; j++) {
    21a4:	19 82       	std	Y+1, r1	; 0x01
    21a6:	18 c0       	rjmp	.+48     	; 0x21d8 <LCD_SendNumber+0x10e>
        LCD_SendChar(arr[i - j - 1]);
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	a9 01       	movw	r20, r18
    21b6:	48 1b       	sub	r20, r24
    21b8:	59 0b       	sbc	r21, r25
    21ba:	ca 01       	movw	r24, r20
    21bc:	9c 01       	movw	r18, r24
    21be:	21 50       	subi	r18, 0x01	; 1
    21c0:	30 40       	sbci	r19, 0x00	; 0
    21c2:	ce 01       	movw	r24, r28
    21c4:	04 96       	adiw	r24, 0x04	; 4
    21c6:	fc 01       	movw	r30, r24
    21c8:	e2 0f       	add	r30, r18
    21ca:	f3 1f       	adc	r31, r19
    21cc:	80 81       	ld	r24, Z
    21ce:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <LCD_SendChar>
        arr[i] = (LastDigit + '0');
        Copy_u8Number /= 10;
        i++;
    }

    for (u8 j = 0; j < i; j++) {
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	8f 5f       	subi	r24, 0xFF	; 255
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	99 81       	ldd	r25, Y+1	; 0x01
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	98 17       	cp	r25, r24
    21de:	20 f3       	brcs	.-56     	; 0x21a8 <LCD_SendNumber+0xde>
        LCD_SendChar(arr[i - j - 1]);
    }
}
    21e0:	63 96       	adiw	r28, 0x13	; 19
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <LCD_u8GOTOXY>:



u8 LCD_u8GOTOXY(u8 Copy_u8LineNum,u8 Copy_u8Location){
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <LCD_u8GOTOXY+0x6>
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <LCD_u8GOTOXY+0x8>
    21fa:	0f 92       	push	r0
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	8a 83       	std	Y+2, r24	; 0x02
    2202:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=STD_TYPES_OK;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location<=39){//40location in each line
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	88 32       	cpi	r24, 0x28	; 40
    220c:	e0 f4       	brcc	.+56     	; 0x2246 <LCD_u8GOTOXY+0x54>
		switch(Copy_u8LineNum){
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	3d 83       	std	Y+5, r19	; 0x05
    2216:	2c 83       	std	Y+4, r18	; 0x04
    2218:	8c 81       	ldd	r24, Y+4	; 0x04
    221a:	9d 81       	ldd	r25, Y+5	; 0x05
    221c:	81 30       	cpi	r24, 0x01	; 1
    221e:	91 05       	cpc	r25, r1
    2220:	31 f0       	breq	.+12     	; 0x222e <LCD_u8GOTOXY+0x3c>
    2222:	2c 81       	ldd	r18, Y+4	; 0x04
    2224:	3d 81       	ldd	r19, Y+5	; 0x05
    2226:	22 30       	cpi	r18, 0x02	; 2
    2228:	31 05       	cpc	r19, r1
    222a:	31 f0       	breq	.+12     	; 0x2238 <LCD_u8GOTOXY+0x46>
    222c:	0a c0       	rjmp	.+20     	; 0x2242 <LCD_u8GOTOXY+0x50>
		case LCD_u8_LINE1:
			LCD_SendCommand(0x80+Copy_u8Location);
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	80 58       	subi	r24, 0x80	; 128
    2232:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_SendCommand>
    2236:	08 c0       	rjmp	.+16     	; 0x2248 <LCD_u8GOTOXY+0x56>
			break;

		case LCD_u8_LINE2:
			LCD_SendCommand(0xC0+Copy_u8Location);
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	80 54       	subi	r24, 0x40	; 64
    223c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_SendCommand>
    2240:	03 c0       	rjmp	.+6      	; 0x2248 <LCD_u8GOTOXY+0x56>
			break;

		default:
			Local_u8ErrorState=STD_TYPES_NOK;
    2242:	19 82       	std	Y+1, r1	; 0x01
    2244:	01 c0       	rjmp	.+2      	; 0x2248 <LCD_u8GOTOXY+0x56>
		}

	}
	else{

		Local_u8ErrorState=STD_TYPES_NOK;
    2246:	19 82       	std	Y+1, r1	; 0x01
	}
return Local_u8ErrorState;
    2248:	89 81       	ldd	r24, Y+1	; 0x01
}
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <LCD_displaySpecialChar>:
void LCD_displaySpecialChar(u8 CharNum, u8* ptr, u8 row, u8 col) {
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	00 d0       	rcall	.+0      	; 0x2260 <LCD_displaySpecialChar+0x6>
    2260:	00 d0       	rcall	.+0      	; 0x2262 <LCD_displaySpecialChar+0x8>
    2262:	00 d0       	rcall	.+0      	; 0x2264 <LCD_displaySpecialChar+0xa>
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	8a 83       	std	Y+2, r24	; 0x02
    226a:	7c 83       	std	Y+4, r23	; 0x04
    226c:	6b 83       	std	Y+3, r22	; 0x03
    226e:	4d 83       	std	Y+5, r20	; 0x05
    2270:	2e 83       	std	Y+6, r18	; 0x06
    if (CharNum > 7) {
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	88 30       	cpi	r24, 0x08	; 8
    2276:	30 f5       	brcc	.+76     	; 0x22c4 <LCD_displaySpecialChar+0x6a>
        return;
    }

    // Set CGRAM address cmd
    LCD_SendCommand(0b01000000 | (CharNum << 3));
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	88 2f       	mov	r24, r24
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	80 64       	ori	r24, 0x40	; 64
    228c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_SendCommand>
 * 0b00000010>>3
 *  after shifting :0b00010000
 *  0b01000000|0b00010000 =0b01010000
 */
 //store pattern in the CGRAM
    for (u8 i = 0; i < 8; i++) {
    2290:	19 82       	std	Y+1, r1	; 0x01
    2292:	0e c0       	rjmp	.+28     	; 0x22b0 <LCD_displaySpecialChar+0x56>
        LCD_SendChar(ptr[i]);
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	28 2f       	mov	r18, r24
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	fc 01       	movw	r30, r24
    22a0:	e2 0f       	add	r30, r18
    22a2:	f3 1f       	adc	r31, r19
    22a4:	80 81       	ld	r24, Z
    22a6:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <LCD_SendChar>
 * 0b00000010>>3
 *  after shifting :0b00010000
 *  0b01000000|0b00010000 =0b01010000
 */
 //store pattern in the CGRAM
    for (u8 i = 0; i < 8; i++) {
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	8f 5f       	subi	r24, 0xFF	; 255
    22ae:	89 83       	std	Y+1, r24	; 0x01
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	88 30       	cpi	r24, 0x08	; 8
    22b4:	78 f3       	brcs	.-34     	; 0x2294 <LCD_displaySpecialChar+0x3a>
        LCD_SendChar(ptr[i]);
    }

    // Set  CA TO DDRAM address
    LCD_u8GOTOXY(row, col);
    22b6:	8d 81       	ldd	r24, Y+5	; 0x05
    22b8:	6e 81       	ldd	r22, Y+6	; 0x06
    22ba:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_u8GOTOXY>

    // Display  character on DDRAM
    LCD_SendChar(CharNum);
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <LCD_SendChar>
}
    22c4:	26 96       	adiw	r28, 0x06	; 6
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <LCD_voidClear>:


void LCD_voidClear(){
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	2e 97       	sbiw	r28, 0x0e	; 14
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand(lcd_Clear);
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_SendCommand>
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	a0 e0       	ldi	r26, 0x00	; 0
    22f6:	b0 e4       	ldi	r27, 0x40	; 64
    22f8:	8b 87       	std	Y+11, r24	; 0x0b
    22fa:	9c 87       	std	Y+12, r25	; 0x0c
    22fc:	ad 87       	std	Y+13, r26	; 0x0d
    22fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2300:	6b 85       	ldd	r22, Y+11	; 0x0b
    2302:	7c 85       	ldd	r23, Y+12	; 0x0c
    2304:	8d 85       	ldd	r24, Y+13	; 0x0d
    2306:	9e 85       	ldd	r25, Y+14	; 0x0e
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	4a ef       	ldi	r20, 0xFA	; 250
    230e:	54 e4       	ldi	r21, 0x44	; 68
    2310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	8f 83       	std	Y+7, r24	; 0x07
    231a:	98 87       	std	Y+8, r25	; 0x08
    231c:	a9 87       	std	Y+9, r26	; 0x09
    231e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2320:	6f 81       	ldd	r22, Y+7	; 0x07
    2322:	78 85       	ldd	r23, Y+8	; 0x08
    2324:	89 85       	ldd	r24, Y+9	; 0x09
    2326:	9a 85       	ldd	r25, Y+10	; 0x0a
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e8       	ldi	r20, 0x80	; 128
    232e:	5f e3       	ldi	r21, 0x3F	; 63
    2330:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2334:	88 23       	and	r24, r24
    2336:	2c f4       	brge	.+10     	; 0x2342 <LCD_voidClear+0x6c>
		__ticks = 1;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
    2340:	3f c0       	rjmp	.+126    	; 0x23c0 <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    2342:	6f 81       	ldd	r22, Y+7	; 0x07
    2344:	78 85       	ldd	r23, Y+8	; 0x08
    2346:	89 85       	ldd	r24, Y+9	; 0x09
    2348:	9a 85       	ldd	r25, Y+10	; 0x0a
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	3f ef       	ldi	r19, 0xFF	; 255
    234e:	4f e7       	ldi	r20, 0x7F	; 127
    2350:	57 e4       	ldi	r21, 0x47	; 71
    2352:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2356:	18 16       	cp	r1, r24
    2358:	4c f5       	brge	.+82     	; 0x23ac <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235a:	6b 85       	ldd	r22, Y+11	; 0x0b
    235c:	7c 85       	ldd	r23, Y+12	; 0x0c
    235e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2360:	9e 85       	ldd	r25, Y+14	; 0x0e
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e2       	ldi	r20, 0x20	; 32
    2368:	51 e4       	ldi	r21, 0x41	; 65
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	9e 83       	std	Y+6, r25	; 0x06
    2380:	8d 83       	std	Y+5, r24	; 0x05
    2382:	0f c0       	rjmp	.+30     	; 0x23a2 <LCD_voidClear+0xcc>
    2384:	88 ec       	ldi	r24, 0xC8	; 200
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	9c 83       	std	Y+4, r25	; 0x04
    238a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	9c 81       	ldd	r25, Y+4	; 0x04
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <LCD_voidClear+0xba>
    2394:	9c 83       	std	Y+4, r25	; 0x04
    2396:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	9e 81       	ldd	r25, Y+6	; 0x06
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	69 f7       	brne	.-38     	; 0x2384 <LCD_voidClear+0xae>
    23aa:	14 c0       	rjmp	.+40     	; 0x23d4 <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ac:	6f 81       	ldd	r22, Y+7	; 0x07
    23ae:	78 85       	ldd	r23, Y+8	; 0x08
    23b0:	89 85       	ldd	r24, Y+9	; 0x09
    23b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	9e 83       	std	Y+6, r25	; 0x06
    23be:	8d 83       	std	Y+5, r24	; 0x05
    23c0:	8d 81       	ldd	r24, Y+5	; 0x05
    23c2:	9e 81       	ldd	r25, Y+6	; 0x06
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <LCD_voidClear+0xf6>
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    23d4:	2e 96       	adiw	r28, 0x0e	; 14
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <TIMER0_void_Inti>:
#include "TIMER0_Private.h"

static void (*Global_TIMER0_PF)(void) = NULL;
static void (*Global_TIMER0_PCTC)(void) = NULL;
/***********************timer0******************/
void TIMER0_void_Inti(void) {
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    /* Mode selection */
#if(MODE== Normal)
    /* 1- select mode  -->> NORMAL MODE */
    CLR_BIT(TIMER0_TCCR0, TIMER0_WGM00_PIN);
    23ee:	a3 e5       	ldi	r26, 0x53	; 83
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	e3 e5       	ldi	r30, 0x53	; 83
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	8f 7b       	andi	r24, 0xBF	; 191
    23fa:	8c 93       	st	X, r24
    CLR_BIT(TIMER0_TCCR0, TIMER0_WGM01_PIN);
    23fc:	a3 e5       	ldi	r26, 0x53	; 83
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	e3 e5       	ldi	r30, 0x53	; 83
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	87 7f       	andi	r24, 0xF7	; 247
    2408:	8c 93       	st	X, r24

    /* 2-enable overflow interrupt to be ready for uploading flag after timer complete counting */
    // SET_BIT(TIMER0_TIMSK, TIMER0_TOIE0_PIN);
    /* 3- set preload value */
    TIMER0_TCNT0 = 192;
    240a:	e2 e5       	ldi	r30, 0x52	; 82
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 ec       	ldi	r24, 0xC0	; 192
    2410:	80 83       	st	Z, r24

#endif

/* Set prescaler */
#if (CLK_MODE == prescaler)
    CLR_BIT(TIMER0_TCCR0, TIMER0_CS02_PIN);
    2412:	a3 e5       	ldi	r26, 0x53	; 83
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e3 e5       	ldi	r30, 0x53	; 83
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	8b 7f       	andi	r24, 0xFB	; 251
    241e:	8c 93       	st	X, r24
    SET_BIT(TIMER0_TCCR0, TIMER0_CS01_PIN);
    2420:	a3 e5       	ldi	r26, 0x53	; 83
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e3 e5       	ldi	r30, 0x53	; 83
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	82 60       	ori	r24, 0x02	; 2
    242c:	8c 93       	st	X, r24
    CLR_BIT(TIMER0_TCCR0, TIMER0_CS00_PIN);
    242e:	a3 e5       	ldi	r26, 0x53	; 83
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e3 e5       	ldi	r30, 0x53	; 83
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	8e 7f       	andi	r24, 0xFE	; 254
    243a:	8c 93       	st	X, r24
    SET_BIT(TIMER0_TCCR0, TIMER0_CS01_PIN);
    SET_BIT(TIMER0_TCCR0, TIMER0_CS00_PIN);
    TIMER0_TCNT0 = 0;

#endif
}
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <TIMER0_START>:
void TIMER0_START(void){
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62

}
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <__vector_11>:


/* ISR for Timer0 Overflow */
void __vector_11(void)  __attribute__((signal));
void __vector_11(void) {
    2450:	1f 92       	push	r1
    2452:	0f 92       	push	r0
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	0f 92       	push	r0
    2458:	11 24       	eor	r1, r1
    245a:	2f 93       	push	r18
    245c:	3f 93       	push	r19
    245e:	4f 93       	push	r20
    2460:	5f 93       	push	r21
    2462:	6f 93       	push	r22
    2464:	7f 93       	push	r23
    2466:	8f 93       	push	r24
    2468:	9f 93       	push	r25
    246a:	af 93       	push	r26
    246c:	bf 93       	push	r27
    246e:	ef 93       	push	r30
    2470:	ff 93       	push	r31
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62

    static u16 Local_counter = 0;

    Local_counter++;
    247a:	80 91 84 00 	lds	r24, 0x0084
    247e:	90 91 85 00 	lds	r25, 0x0085
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	90 93 85 00 	sts	0x0085, r25
    2488:	80 93 84 00 	sts	0x0084, r24
    if (Local_counter == 3907) {
    248c:	80 91 84 00 	lds	r24, 0x0084
    2490:	90 91 85 00 	lds	r25, 0x0085
    2494:	2f e0       	ldi	r18, 0x0F	; 15
    2496:	83 34       	cpi	r24, 0x43	; 67
    2498:	92 07       	cpc	r25, r18
    249a:	99 f4       	brne	.+38     	; 0x24c2 <__vector_11+0x72>
        /* 1-update preload */
        TIMER0_TCNT0 = 192;
    249c:	e2 e5       	ldi	r30, 0x52	; 82
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 ec       	ldi	r24, 0xC0	; 192
    24a2:	80 83       	st	Z, r24
        /* 2-reset counter to 0 */
        Local_counter = 0;
    24a4:	10 92 85 00 	sts	0x0085, r1
    24a8:	10 92 84 00 	sts	0x0084, r1
        /* 3-toggle led; function taken from main */
        if (Global_TIMER0_PF != NULL) {
    24ac:	80 91 80 00 	lds	r24, 0x0080
    24b0:	90 91 81 00 	lds	r25, 0x0081
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	29 f0       	breq	.+10     	; 0x24c2 <__vector_11+0x72>
            Global_TIMER0_PF();
    24b8:	e0 91 80 00 	lds	r30, 0x0080
    24bc:	f0 91 81 00 	lds	r31, 0x0081
    24c0:	09 95       	icall
        }
    }
}
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	ff 91       	pop	r31
    24c8:	ef 91       	pop	r30
    24ca:	bf 91       	pop	r27
    24cc:	af 91       	pop	r26
    24ce:	9f 91       	pop	r25
    24d0:	8f 91       	pop	r24
    24d2:	7f 91       	pop	r23
    24d4:	6f 91       	pop	r22
    24d6:	5f 91       	pop	r21
    24d8:	4f 91       	pop	r20
    24da:	3f 91       	pop	r19
    24dc:	2f 91       	pop	r18
    24de:	0f 90       	pop	r0
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	0f 90       	pop	r0
    24e4:	1f 90       	pop	r1
    24e6:	18 95       	reti

000024e8 <TIMER0_u8_TIMER0SETCALLBACK_ovf>:

/* Callback function for Timer0 Overflow */
u8 TIMER0_u8_TIMER0SETCALLBACK_ovf(void (*pf)(void)) {
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	00 d0       	rcall	.+0      	; 0x24ee <TIMER0_u8_TIMER0SETCALLBACK_ovf+0x6>
    24ee:	0f 92       	push	r0
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	9b 83       	std	Y+3, r25	; 0x03
    24f6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = STD_TYPES_OK;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	89 83       	std	Y+1, r24	; 0x01
    if (pf != NULL) {
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	39 f0       	breq	.+14     	; 0x2512 <TIMER0_u8_TIMER0SETCALLBACK_ovf+0x2a>
        Global_TIMER0_PF = pf;
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	9b 81       	ldd	r25, Y+3	; 0x03
    2508:	90 93 81 00 	sts	0x0081, r25
    250c:	80 93 80 00 	sts	0x0080, r24
    2510:	01 c0       	rjmp	.+2      	; 0x2514 <TIMER0_u8_TIMER0SETCALLBACK_ovf+0x2c>
    } else {
        Local_u8ErrorState = STD_TYPES_NOK;
    2512:	19 82       	std	Y+1, r1	; 0x01
    }
    SET_BIT(TIMER0_TIMSK, TIMER0_TOIE0_PIN);
    2514:	a9 e5       	ldi	r26, 0x59	; 89
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e9 e5       	ldi	r30, 0x59	; 89
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	81 60       	ori	r24, 0x01	; 1
    2520:	8c 93       	st	X, r24
    return Local_u8ErrorState;
    2522:	89 81       	ldd	r24, Y+1	; 0x01
}
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <__vector_10>:

/* ISR for Timer0 CTC */
void __vector_10(void)  __attribute__((signal));
void __vector_10(void) {
    2530:	1f 92       	push	r1
    2532:	0f 92       	push	r0
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	0f 92       	push	r0
    2538:	11 24       	eor	r1, r1
    253a:	2f 93       	push	r18
    253c:	3f 93       	push	r19
    253e:	4f 93       	push	r20
    2540:	5f 93       	push	r21
    2542:	6f 93       	push	r22
    2544:	7f 93       	push	r23
    2546:	8f 93       	push	r24
    2548:	9f 93       	push	r25
    254a:	af 93       	push	r26
    254c:	bf 93       	push	r27
    254e:	ef 93       	push	r30
    2550:	ff 93       	push	r31
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62

    static u16 Local_counter = 0;
    Local_counter++;
    255a:	80 91 86 00 	lds	r24, 0x0086
    255e:	90 91 87 00 	lds	r25, 0x0087
    2562:	01 96       	adiw	r24, 0x01	; 1
    2564:	90 93 87 00 	sts	0x0087, r25
    2568:	80 93 86 00 	sts	0x0086, r24
    if (Local_counter == 10000) {
    256c:	80 91 86 00 	lds	r24, 0x0086
    2570:	90 91 87 00 	lds	r25, 0x0087
    2574:	27 e2       	ldi	r18, 0x27	; 39
    2576:	80 31       	cpi	r24, 0x10	; 16
    2578:	92 07       	cpc	r25, r18
    257a:	79 f4       	brne	.+30     	; 0x259a <__vector_10+0x6a>
        /* 2-reset counter to 0 */
        Local_counter = 0;
    257c:	10 92 87 00 	sts	0x0087, r1
    2580:	10 92 86 00 	sts	0x0086, r1
        /* 3-toggle led; function taken from main */
        if (Global_TIMER0_PCTC != NULL) {
    2584:	80 91 82 00 	lds	r24, 0x0082
    2588:	90 91 83 00 	lds	r25, 0x0083
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	29 f0       	breq	.+10     	; 0x259a <__vector_10+0x6a>
            Global_TIMER0_PCTC();
    2590:	e0 91 82 00 	lds	r30, 0x0082
    2594:	f0 91 83 00 	lds	r31, 0x0083
    2598:	09 95       	icall
        }
    }
    SET_BIT(TIMER0_TIMSK, TIMER0_OCIE0_PIN);
    259a:	a9 e5       	ldi	r26, 0x59	; 89
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e9 e5       	ldi	r30, 0x59	; 89
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	82 60       	ori	r24, 0x02	; 2
    25a6:	8c 93       	st	X, r24

}
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	ff 91       	pop	r31
    25ae:	ef 91       	pop	r30
    25b0:	bf 91       	pop	r27
    25b2:	af 91       	pop	r26
    25b4:	9f 91       	pop	r25
    25b6:	8f 91       	pop	r24
    25b8:	7f 91       	pop	r23
    25ba:	6f 91       	pop	r22
    25bc:	5f 91       	pop	r21
    25be:	4f 91       	pop	r20
    25c0:	3f 91       	pop	r19
    25c2:	2f 91       	pop	r18
    25c4:	0f 90       	pop	r0
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	0f 90       	pop	r0
    25ca:	1f 90       	pop	r1
    25cc:	18 95       	reti

000025ce <TIMER0_u8_TIMER0SETCALLBACK_CTC>:

/* Callback function for Timer0 CTC */
u8 TIMER0_u8_TIMER0SETCALLBACK_CTC(void (*pf)(void)) {
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <TIMER0_u8_TIMER0SETCALLBACK_CTC+0x6>
    25d4:	0f 92       	push	r0
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	9b 83       	std	Y+3, r25	; 0x03
    25dc:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8ErrorState = STD_TYPES_OK;
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	89 83       	std	Y+1, r24	; 0x01
    if (pf != NULL) {
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	9b 81       	ldd	r25, Y+3	; 0x03
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	39 f0       	breq	.+14     	; 0x25f8 <TIMER0_u8_TIMER0SETCALLBACK_CTC+0x2a>
        Global_TIMER0_PCTC = pf;
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	90 93 83 00 	sts	0x0083, r25
    25f2:	80 93 82 00 	sts	0x0082, r24
    25f6:	01 c0       	rjmp	.+2      	; 0x25fa <TIMER0_u8_TIMER0SETCALLBACK_CTC+0x2c>
    } else {
        Local_u8ErrorState = STD_TYPES_NOK;
    25f8:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8ErrorState;
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret

00002608 <TIMER0_voidTIMER0SetCompareMatch>:

/* Update OCR value in Fast PWM mode */
void TIMER0_voidTIMER0SetCompareMatch(u8 Copy_u8OCRValue) {
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	0f 92       	push	r0
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_OCR0 = Copy_u8OCRValue;
    2614:	ec e5       	ldi	r30, 0x5C	; 92
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	80 83       	st	Z, r24
}
    261c:	0f 90       	pop	r0
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <TIMER1_void_Inti>:



/**************************timer1***********************/
void TIMER1_void_Inti(void){
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
	//select mode fast pwm mode
	SET_BIT(TIMER1_TCCR1B,TIMER1_WGM13_PIN);
    262c:	ae e4       	ldi	r26, 0x4E	; 78
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	ee e4       	ldi	r30, 0x4E	; 78
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	80 61       	ori	r24, 0x10	; 16
    2638:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1B,TIMER1_WGM12_PIN);
    263a:	ae e4       	ldi	r26, 0x4E	; 78
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	ee e4       	ldi	r30, 0x4E	; 78
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	88 60       	ori	r24, 0x08	; 8
    2646:	8c 93       	st	X, r24
	SET_BIT(TIMER1_TCCR1A,TIMER1_WGM11_PIN);
    2648:	af e4       	ldi	r26, 0x4F	; 79
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	ef e4       	ldi	r30, 0x4F	; 79
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	82 60       	ori	r24, 0x02	; 2
    2654:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1A,TIMER1_WGM10_PIN);
    2656:	af e4       	ldi	r26, 0x4F	; 79
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	ef e4       	ldi	r30, 0x4F	; 79
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	8e 7f       	andi	r24, 0xFE	; 254
    2662:	8c 93       	st	X, r24
     //select  HW action on OC1A pin --->>non inverting
	  SET_BIT(TIMER1_TCCR1A, TIMER1_COM1A1_PIN);
    2664:	af e4       	ldi	r26, 0x4F	; 79
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	ef e4       	ldi	r30, 0x4F	; 79
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	80 68       	ori	r24, 0x80	; 128
    2670:	8c 93       	st	X, r24
	  CLR_BIT(TIMER1_TCCR1A, TIMER1_COM1A0_PIN);
    2672:	af e4       	ldi	r26, 0x4F	; 79
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	ef e4       	ldi	r30, 0x4F	; 79
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	8f 7b       	andi	r24, 0xBF	; 191
    267e:	8c 93       	st	X, r24
	  //set ovf value in the ICR1 reg
	  TIMER1_ICR=19999;
    2680:	e6 e4       	ldi	r30, 0x46	; 70
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	8f e1       	ldi	r24, 0x1F	; 31
    2686:	9e e4       	ldi	r25, 0x4E	; 78
    2688:	91 83       	std	Z+1, r25	; 0x01
    268a:	80 83       	st	Z, r24
	  /*set angle for servo motor*/
	  //say i set it to angle 0
	  TIMER1_OCR1A=999;
    268c:	ea e4       	ldi	r30, 0x4A	; 74
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	87 ee       	ldi	r24, 0xE7	; 231
    2692:	93 e0       	ldi	r25, 0x03	; 3
    2694:	91 83       	std	Z+1, r25	; 0x01
    2696:	80 83       	st	Z, r24
	  //set servo to 180

#if (CLK_MODE == prescaler)
    CLR_BIT(TIMER1_TCCR1B, TIMER1_CS12_PIN);
    2698:	ae e4       	ldi	r26, 0x4E	; 78
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	ee e4       	ldi	r30, 0x4E	; 78
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	8b 7f       	andi	r24, 0xFB	; 251
    26a4:	8c 93       	st	X, r24
    SET_BIT(TIMER1_TCCR1B, TIMER1_CS11_PIN);
    26a6:	ae e4       	ldi	r26, 0x4E	; 78
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	ee e4       	ldi	r30, 0x4E	; 78
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z
    26b0:	82 60       	ori	r24, 0x02	; 2
    26b2:	8c 93       	st	X, r24
    CLR_BIT(TIMER1_TCCR1B, TIMER1_CS10_PIN);
    26b4:	ae e4       	ldi	r26, 0x4E	; 78
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	ee e4       	ldi	r30, 0x4E	; 78
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	8e 7f       	andi	r24, 0xFE	; 254
    26c0:	8c 93       	st	X, r24
    SET_BIT(TIMER1_TCCR1B, TIMER1_CS11_PIN);
    SET_BIT(TIMER1_TCCR1B, TIMER1_CS10_PIN);

#endif

}
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <TIMER1_ICRSetRegValue>:


void TIMER1_ICRSetRegValue(u16 Copy_u8TopValue){
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	00 d0       	rcall	.+0      	; 0x26ce <TIMER1_ICRSetRegValue+0x6>
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICR=Copy_u8TopValue;
    26d6:	e6 e4       	ldi	r30, 0x46	; 70
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	9a 81       	ldd	r25, Y+2	; 0x02
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	80 83       	st	Z, r24
}
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <TIMER0_void_STOPCounter>:

void TIMER0_void_STOPCounter(void){
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
	TIMER1_TCCR1B&=0b11111000;
    26f4:	ae e4       	ldi	r26, 0x4E	; 78
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	ee e4       	ldi	r30, 0x4E	; 78
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	88 7f       	andi	r24, 0xF8	; 248
    2700:	8c 93       	st	X, r24

}
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <TIMER0_void_ResetCounter>:
void TIMER0_void_ResetCounter(){
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62

	TIMER0_TCNT0=0;
    2710:	e2 e5       	ldi	r30, 0x52	; 82
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	10 82       	st	Z, r1

	// Reset Timer0 counter
}
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <TIMER0_Return_TCNT0_Reg>:
u8 TIMER0_Return_TCNT0_Reg(){
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
	return TIMER0_TCNT0;
    2724:	e2 e5       	ldi	r30, 0x52	; 82
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
}
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <main>:

static u8 sec = 0;
static u8 min = 0;
static u8 hr = 0;

int main() {
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	0f 92       	push	r0
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    u8 keyPressed = KEYPAPD_u8_KEY_NOT_Pressed;
    273a:	8f ef       	ldi	r24, 0xFF	; 255
    273c:	89 83       	std	Y+1, r24	; 0x01

    // Initialize DIO
    DIO_voidInit();
    273e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidInit>

    // Initialize LCD
    LCD_voidIntit();
    2742:	0e 94 a1 0b 	call	0x1742	; 0x1742 <LCD_voidIntit>
  // Enable Global Interrupt
    GIE_Enable();
    2746:	0e 94 76 0a 	call	0x14ec	; 0x14ec <GIE_Enable>

    // Set initial time using the keypad
    SetInitialTime();
    274a:	0e 94 0d 14 	call	0x281a	; 0x281a <SetInitialTime>

    KEYPAD_u8GetKeyState(&keyPressed);
    274e:	ce 01       	movw	r24, r28
    2750:	01 96       	adiw	r24, 0x01	; 1
    2752:	0e 94 92 0a 	call	0x1524	; 0x1524 <KEYPAD_u8GetKeyState>
    2756:	04 c0       	rjmp	.+8      	; 0x2760 <main+0x30>
    // Wait for the start button 'S'
    while (keyPressed != 'S') {
        KEYPAD_u8GetKeyState(&keyPressed);
    2758:	ce 01       	movw	r24, r28
    275a:	01 96       	adiw	r24, 0x01	; 1
    275c:	0e 94 92 0a 	call	0x1524	; 0x1524 <KEYPAD_u8GetKeyState>
    // Set initial time using the keypad
    SetInitialTime();

    KEYPAD_u8GetKeyState(&keyPressed);
    // Wait for the start button 'S'
    while (keyPressed != 'S') {
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	83 35       	cpi	r24, 0x53	; 83
    2764:	c9 f7       	brne	.-14     	; 0x2758 <main+0x28>
        KEYPAD_u8GetKeyState(&keyPressed);
    }


    // Initialize Timer0
    TIMER0_void_Inti();
    2766:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <TIMER0_void_Inti>
    TIMER0_u8_TIMER0SETCALLBACK_ovf(&STOP_WATCH);
    276a:	8a eb       	ldi	r24, 0xBA	; 186
    276c:	93 e1       	ldi	r25, 0x13	; 19
    276e:	0e 94 74 12 	call	0x24e8	; 0x24e8 <TIMER0_u8_TIMER0SETCALLBACK_ovf>
    2772:	ff cf       	rjmp	.-2      	; 0x2772 <main+0x42>

00002774 <STOP_WATCH>:
    while (1) {

    }
}

void STOP_WATCH() {
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    if (sec > 0) {
    277c:	80 91 88 00 	lds	r24, 0x0088
    2780:	88 23       	and	r24, r24
    2782:	31 f0       	breq	.+12     	; 0x2790 <STOP_WATCH+0x1c>
        sec--;
    2784:	80 91 88 00 	lds	r24, 0x0088
    2788:	81 50       	subi	r24, 0x01	; 1
    278a:	80 93 88 00 	sts	0x0088, r24
    278e:	1c c0       	rjmp	.+56     	; 0x27c8 <STOP_WATCH+0x54>
    } else {
        sec = 59;
    2790:	8b e3       	ldi	r24, 0x3B	; 59
    2792:	80 93 88 00 	sts	0x0088, r24
        if (min > 0) {
    2796:	80 91 89 00 	lds	r24, 0x0089
    279a:	88 23       	and	r24, r24
    279c:	31 f0       	breq	.+12     	; 0x27aa <STOP_WATCH+0x36>
            min--;
    279e:	80 91 89 00 	lds	r24, 0x0089
    27a2:	81 50       	subi	r24, 0x01	; 1
    27a4:	80 93 89 00 	sts	0x0089, r24
    27a8:	0f c0       	rjmp	.+30     	; 0x27c8 <STOP_WATCH+0x54>
        } else {
            min = 59;
    27aa:	8b e3       	ldi	r24, 0x3B	; 59
    27ac:	80 93 89 00 	sts	0x0089, r24
            if (hr > 0) {
    27b0:	80 91 8a 00 	lds	r24, 0x008A
    27b4:	88 23       	and	r24, r24
    27b6:	31 f0       	breq	.+12     	; 0x27c4 <STOP_WATCH+0x50>
                hr--;
    27b8:	80 91 8a 00 	lds	r24, 0x008A
    27bc:	81 50       	subi	r24, 0x01	; 1
    27be:	80 93 8a 00 	sts	0x008A, r24
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <STOP_WATCH+0x54>
            } else {
                hr = 0;
    27c4:	10 92 8a 00 	sts	0x008A, r1
            }
        }
    }

    LCD_voidClear();
    27c8:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_voidClear>
    LCD_SendNumber(hr);
    27cc:	80 91 8a 00 	lds	r24, 0x008A
    27d0:	88 2f       	mov	r24, r24
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	a0 e0       	ldi	r26, 0x00	; 0
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	bc 01       	movw	r22, r24
    27da:	cd 01       	movw	r24, r26
    27dc:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_SendNumber>
    LCD_SendChar(':');
    27e0:	8a e3       	ldi	r24, 0x3A	; 58
    27e2:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <LCD_SendChar>
    LCD_SendNumber(min);
    27e6:	80 91 89 00 	lds	r24, 0x0089
    27ea:	88 2f       	mov	r24, r24
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	a0 e0       	ldi	r26, 0x00	; 0
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	bc 01       	movw	r22, r24
    27f4:	cd 01       	movw	r24, r26
    27f6:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_SendNumber>
    LCD_SendChar(':');
    27fa:	8a e3       	ldi	r24, 0x3A	; 58
    27fc:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <LCD_SendChar>
    LCD_SendNumber(sec);
    2800:	80 91 88 00 	lds	r24, 0x0088
    2804:	88 2f       	mov	r24, r24
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	a0 e0       	ldi	r26, 0x00	; 0
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_SendNumber>
}
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	08 95       	ret

0000281a <SetInitialTime>:

void SetInitialTime() {
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	00 d0       	rcall	.+0      	; 0x2820 <SetInitialTime+0x6>
    2820:	00 d0       	rcall	.+0      	; 0x2822 <SetInitialTime+0x8>
    2822:	0f 92       	push	r0
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
    u8 cursorPosition = 0;
    2828:	1c 82       	std	Y+4, r1	; 0x04
    u8 Hr = 0, Min = 0, Sec = 0;
    282a:	1b 82       	std	Y+3, r1	; 0x03
    282c:	1a 82       	std	Y+2, r1	; 0x02
    282e:	19 82       	std	Y+1, r1	; 0x01
    u8 value = KEYPAPD_u8_KEY_NOT_Pressed;
    2830:	8f ef       	ldi	r24, 0xFF	; 255
    2832:	8d 83       	std	Y+5, r24	; 0x05

    LCD_voidClear();
    2834:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_voidClear>
    LCD_u8GOTOXY(LCD_u8_LINE1, 0);
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	60 e0       	ldi	r22, 0x00	; 0
    283c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_u8GOTOXY>
    LCD_SendNumber(Hr);
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	88 2f       	mov	r24, r24
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	a0 e0       	ldi	r26, 0x00	; 0
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	bc 01       	movw	r22, r24
    284c:	cd 01       	movw	r24, r26
    284e:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_SendNumber>
    LCD_u8GOTOXY(LCD_u8_LINE1,2);
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	62 e0       	ldi	r22, 0x02	; 2
    2856:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_u8GOTOXY>
    LCD_SendChar(':');
    285a:	8a e3       	ldi	r24, 0x3A	; 58
    285c:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <LCD_SendChar>
    LCD_SendNumber(Min);
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	88 2f       	mov	r24, r24
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	a0 e0       	ldi	r26, 0x00	; 0
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	bc 01       	movw	r22, r24
    286c:	cd 01       	movw	r24, r26
    286e:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_SendNumber>
    LCD_u8GOTOXY(LCD_u8_LINE1,5);
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	65 e0       	ldi	r22, 0x05	; 5
    2876:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_u8GOTOXY>
    LCD_SendChar(':');
    287a:	8a e3       	ldi	r24, 0x3A	; 58
    287c:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <LCD_SendChar>
    LCD_SendNumber(Sec);
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	88 2f       	mov	r24, r24
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	a0 e0       	ldi	r26, 0x00	; 0
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	bc 01       	movw	r22, r24
    288c:	cd 01       	movw	r24, r26
    288e:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_SendNumber>

    while (1) {
        KEYPAD_u8GetKeyState(&value);
    2892:	ce 01       	movw	r24, r28
    2894:	05 96       	adiw	r24, 0x05	; 5
    2896:	0e 94 92 0a 	call	0x1524	; 0x1524 <KEYPAD_u8GetKeyState>
        if (value != KEYPAPD_u8_KEY_NOT_Pressed) {
    289a:	8d 81       	ldd	r24, Y+5	; 0x05
    289c:	8f 3f       	cpi	r24, 0xFF	; 255
    289e:	c9 f3       	breq	.-14     	; 0x2892 <SetInitialTime+0x78>
            if (value >= 0 && value <= 9) {
    28a0:	8d 81       	ldd	r24, Y+5	; 0x05
    28a2:	8a 30       	cpi	r24, 0x0A	; 10
    28a4:	08 f0       	brcs	.+2      	; 0x28a8 <SetInitialTime+0x8e>
    28a6:	65 c0       	rjmp	.+202    	; 0x2972 <SetInitialTime+0x158>
                if (cursorPosition == 0) {//
    28a8:	8c 81       	ldd	r24, Y+4	; 0x04
    28aa:	88 23       	and	r24, r24
    28ac:	f9 f4       	brne	.+62     	; 0x28ec <SetInitialTime+0xd2>
                    Hr = Hr * 10 + (value );
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	88 2f       	mov	r24, r24
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	9c 01       	movw	r18, r24
    28b6:	22 0f       	add	r18, r18
    28b8:	33 1f       	adc	r19, r19
    28ba:	c9 01       	movw	r24, r18
    28bc:	88 0f       	add	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	82 0f       	add	r24, r18
    28c6:	93 1f       	adc	r25, r19
    28c8:	98 2f       	mov	r25, r24
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	89 0f       	add	r24, r25
    28ce:	8b 83       	std	Y+3, r24	; 0x03
                    LCD_u8GOTOXY(LCD_u8_LINE1, 0);
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_u8GOTOXY>
                    LCD_SendNumber(Hr);
    28d8:	8b 81       	ldd	r24, Y+3	; 0x03
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	a0 e0       	ldi	r26, 0x00	; 0
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	bc 01       	movw	r22, r24
    28e4:	cd 01       	movw	r24, r26
    28e6:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_SendNumber>
    28ea:	43 c0       	rjmp	.+134    	; 0x2972 <SetInitialTime+0x158>
                } else if (cursorPosition == 1) {//min
    28ec:	8c 81       	ldd	r24, Y+4	; 0x04
    28ee:	81 30       	cpi	r24, 0x01	; 1
    28f0:	f9 f4       	brne	.+62     	; 0x2930 <SetInitialTime+0x116>
                    Min = Min * 10 + (value);
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	88 2f       	mov	r24, r24
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	9c 01       	movw	r18, r24
    28fa:	22 0f       	add	r18, r18
    28fc:	33 1f       	adc	r19, r19
    28fe:	c9 01       	movw	r24, r18
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	82 0f       	add	r24, r18
    290a:	93 1f       	adc	r25, r19
    290c:	98 2f       	mov	r25, r24
    290e:	8d 81       	ldd	r24, Y+5	; 0x05
    2910:	89 0f       	add	r24, r25
    2912:	8a 83       	std	Y+2, r24	; 0x02
                    LCD_u8GOTOXY(LCD_u8_LINE1, 3);
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	63 e0       	ldi	r22, 0x03	; 3
    2918:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_u8GOTOXY>
                    LCD_SendNumber(Min);
    291c:	8a 81       	ldd	r24, Y+2	; 0x02
    291e:	88 2f       	mov	r24, r24
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	a0 e0       	ldi	r26, 0x00	; 0
    2924:	b0 e0       	ldi	r27, 0x00	; 0
    2926:	bc 01       	movw	r22, r24
    2928:	cd 01       	movw	r24, r26
    292a:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_SendNumber>
    292e:	21 c0       	rjmp	.+66     	; 0x2972 <SetInitialTime+0x158>
                } else if (cursorPosition == 2) {//sec
    2930:	8c 81       	ldd	r24, Y+4	; 0x04
    2932:	82 30       	cpi	r24, 0x02	; 2
    2934:	f1 f4       	brne	.+60     	; 0x2972 <SetInitialTime+0x158>
                    Sec = Sec * 10 + (value);
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	88 2f       	mov	r24, r24
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	9c 01       	movw	r18, r24
    293e:	22 0f       	add	r18, r18
    2940:	33 1f       	adc	r19, r19
    2942:	c9 01       	movw	r24, r18
    2944:	88 0f       	add	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	88 0f       	add	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	82 0f       	add	r24, r18
    294e:	93 1f       	adc	r25, r19
    2950:	98 2f       	mov	r25, r24
    2952:	8d 81       	ldd	r24, Y+5	; 0x05
    2954:	89 0f       	add	r24, r25
    2956:	89 83       	std	Y+1, r24	; 0x01
                    LCD_u8GOTOXY(LCD_u8_LINE1, 6);
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	66 e0       	ldi	r22, 0x06	; 6
    295c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_u8GOTOXY>
                    LCD_SendNumber(Sec);
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	88 2f       	mov	r24, r24
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	a0 e0       	ldi	r26, 0x00	; 0
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_SendNumber>
                }

            }

            if (value == 'R') {
    2972:	8d 81       	ldd	r24, Y+5	; 0x05
    2974:	82 35       	cpi	r24, 0x52	; 82
    2976:	59 f4       	brne	.+22     	; 0x298e <SetInitialTime+0x174>
                cursorPosition = (cursorPosition + 1) % 3;
    2978:	8c 81       	ldd	r24, Y+4	; 0x04
    297a:	88 2f       	mov	r24, r24
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	01 96       	adiw	r24, 0x01	; 1
    2980:	23 e0       	ldi	r18, 0x03	; 3
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	b9 01       	movw	r22, r18
    2986:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__divmodhi4>
    298a:	8c 83       	std	Y+4, r24	; 0x04
    298c:	82 cf       	rjmp	.-252    	; 0x2892 <SetInitialTime+0x78>
            } else if (value == 'L') {
    298e:	8d 81       	ldd	r24, Y+5	; 0x05
    2990:	8c 34       	cpi	r24, 0x4C	; 76
    2992:	59 f4       	brne	.+22     	; 0x29aa <SetInitialTime+0x190>
                cursorPosition = (cursorPosition - 1 + 3) % 3;
    2994:	8c 81       	ldd	r24, Y+4	; 0x04
    2996:	88 2f       	mov	r24, r24
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	02 96       	adiw	r24, 0x02	; 2
    299c:	23 e0       	ldi	r18, 0x03	; 3
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	b9 01       	movw	r22, r18
    29a2:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__divmodhi4>
    29a6:	8c 83       	std	Y+4, r24	; 0x04
    29a8:	74 cf       	rjmp	.-280    	; 0x2892 <SetInitialTime+0x78>
            } else if (value == 'E') {
    29aa:	8d 81       	ldd	r24, Y+5	; 0x05
    29ac:	85 34       	cpi	r24, 0x45	; 69
    29ae:	09 f0       	breq	.+2      	; 0x29b2 <SetInitialTime+0x198>
    29b0:	70 cf       	rjmp	.-288    	; 0x2892 <SetInitialTime+0x78>
                hr = Hr;
    29b2:	8b 81       	ldd	r24, Y+3	; 0x03
    29b4:	80 93 8a 00 	sts	0x008A, r24
                min = Min;
    29b8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ba:	80 93 89 00 	sts	0x0089, r24
                sec = Sec;
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	80 93 88 00 	sts	0x0088, r24
                break;
            }
        }
    }
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <__divmodhi4>:
    29d4:	97 fb       	bst	r25, 7
    29d6:	09 2e       	mov	r0, r25
    29d8:	07 26       	eor	r0, r23
    29da:	0a d0       	rcall	.+20     	; 0x29f0 <__divmodhi4_neg1>
    29dc:	77 fd       	sbrc	r23, 7
    29de:	04 d0       	rcall	.+8      	; 0x29e8 <__divmodhi4_neg2>
    29e0:	27 d0       	rcall	.+78     	; 0x2a30 <__udivmodhi4>
    29e2:	06 d0       	rcall	.+12     	; 0x29f0 <__divmodhi4_neg1>
    29e4:	00 20       	and	r0, r0
    29e6:	1a f4       	brpl	.+6      	; 0x29ee <__divmodhi4_exit>

000029e8 <__divmodhi4_neg2>:
    29e8:	70 95       	com	r23
    29ea:	61 95       	neg	r22
    29ec:	7f 4f       	sbci	r23, 0xFF	; 255

000029ee <__divmodhi4_exit>:
    29ee:	08 95       	ret

000029f0 <__divmodhi4_neg1>:
    29f0:	f6 f7       	brtc	.-4      	; 0x29ee <__divmodhi4_exit>
    29f2:	90 95       	com	r25
    29f4:	81 95       	neg	r24
    29f6:	9f 4f       	sbci	r25, 0xFF	; 255
    29f8:	08 95       	ret

000029fa <__divmodsi4>:
    29fa:	97 fb       	bst	r25, 7
    29fc:	09 2e       	mov	r0, r25
    29fe:	05 26       	eor	r0, r21
    2a00:	0e d0       	rcall	.+28     	; 0x2a1e <__divmodsi4_neg1>
    2a02:	57 fd       	sbrc	r21, 7
    2a04:	04 d0       	rcall	.+8      	; 0x2a0e <__divmodsi4_neg2>
    2a06:	28 d0       	rcall	.+80     	; 0x2a58 <__udivmodsi4>
    2a08:	0a d0       	rcall	.+20     	; 0x2a1e <__divmodsi4_neg1>
    2a0a:	00 1c       	adc	r0, r0
    2a0c:	38 f4       	brcc	.+14     	; 0x2a1c <__divmodsi4_exit>

00002a0e <__divmodsi4_neg2>:
    2a0e:	50 95       	com	r21
    2a10:	40 95       	com	r20
    2a12:	30 95       	com	r19
    2a14:	21 95       	neg	r18
    2a16:	3f 4f       	sbci	r19, 0xFF	; 255
    2a18:	4f 4f       	sbci	r20, 0xFF	; 255
    2a1a:	5f 4f       	sbci	r21, 0xFF	; 255

00002a1c <__divmodsi4_exit>:
    2a1c:	08 95       	ret

00002a1e <__divmodsi4_neg1>:
    2a1e:	f6 f7       	brtc	.-4      	; 0x2a1c <__divmodsi4_exit>
    2a20:	90 95       	com	r25
    2a22:	80 95       	com	r24
    2a24:	70 95       	com	r23
    2a26:	61 95       	neg	r22
    2a28:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2e:	08 95       	ret

00002a30 <__udivmodhi4>:
    2a30:	aa 1b       	sub	r26, r26
    2a32:	bb 1b       	sub	r27, r27
    2a34:	51 e1       	ldi	r21, 0x11	; 17
    2a36:	07 c0       	rjmp	.+14     	; 0x2a46 <__udivmodhi4_ep>

00002a38 <__udivmodhi4_loop>:
    2a38:	aa 1f       	adc	r26, r26
    2a3a:	bb 1f       	adc	r27, r27
    2a3c:	a6 17       	cp	r26, r22
    2a3e:	b7 07       	cpc	r27, r23
    2a40:	10 f0       	brcs	.+4      	; 0x2a46 <__udivmodhi4_ep>
    2a42:	a6 1b       	sub	r26, r22
    2a44:	b7 0b       	sbc	r27, r23

00002a46 <__udivmodhi4_ep>:
    2a46:	88 1f       	adc	r24, r24
    2a48:	99 1f       	adc	r25, r25
    2a4a:	5a 95       	dec	r21
    2a4c:	a9 f7       	brne	.-22     	; 0x2a38 <__udivmodhi4_loop>
    2a4e:	80 95       	com	r24
    2a50:	90 95       	com	r25
    2a52:	bc 01       	movw	r22, r24
    2a54:	cd 01       	movw	r24, r26
    2a56:	08 95       	ret

00002a58 <__udivmodsi4>:
    2a58:	a1 e2       	ldi	r26, 0x21	; 33
    2a5a:	1a 2e       	mov	r1, r26
    2a5c:	aa 1b       	sub	r26, r26
    2a5e:	bb 1b       	sub	r27, r27
    2a60:	fd 01       	movw	r30, r26
    2a62:	0d c0       	rjmp	.+26     	; 0x2a7e <__udivmodsi4_ep>

00002a64 <__udivmodsi4_loop>:
    2a64:	aa 1f       	adc	r26, r26
    2a66:	bb 1f       	adc	r27, r27
    2a68:	ee 1f       	adc	r30, r30
    2a6a:	ff 1f       	adc	r31, r31
    2a6c:	a2 17       	cp	r26, r18
    2a6e:	b3 07       	cpc	r27, r19
    2a70:	e4 07       	cpc	r30, r20
    2a72:	f5 07       	cpc	r31, r21
    2a74:	20 f0       	brcs	.+8      	; 0x2a7e <__udivmodsi4_ep>
    2a76:	a2 1b       	sub	r26, r18
    2a78:	b3 0b       	sbc	r27, r19
    2a7a:	e4 0b       	sbc	r30, r20
    2a7c:	f5 0b       	sbc	r31, r21

00002a7e <__udivmodsi4_ep>:
    2a7e:	66 1f       	adc	r22, r22
    2a80:	77 1f       	adc	r23, r23
    2a82:	88 1f       	adc	r24, r24
    2a84:	99 1f       	adc	r25, r25
    2a86:	1a 94       	dec	r1
    2a88:	69 f7       	brne	.-38     	; 0x2a64 <__udivmodsi4_loop>
    2a8a:	60 95       	com	r22
    2a8c:	70 95       	com	r23
    2a8e:	80 95       	com	r24
    2a90:	90 95       	com	r25
    2a92:	9b 01       	movw	r18, r22
    2a94:	ac 01       	movw	r20, r24
    2a96:	bd 01       	movw	r22, r26
    2a98:	cf 01       	movw	r24, r30
    2a9a:	08 95       	ret

00002a9c <__prologue_saves__>:
    2a9c:	2f 92       	push	r2
    2a9e:	3f 92       	push	r3
    2aa0:	4f 92       	push	r4
    2aa2:	5f 92       	push	r5
    2aa4:	6f 92       	push	r6
    2aa6:	7f 92       	push	r7
    2aa8:	8f 92       	push	r8
    2aaa:	9f 92       	push	r9
    2aac:	af 92       	push	r10
    2aae:	bf 92       	push	r11
    2ab0:	cf 92       	push	r12
    2ab2:	df 92       	push	r13
    2ab4:	ef 92       	push	r14
    2ab6:	ff 92       	push	r15
    2ab8:	0f 93       	push	r16
    2aba:	1f 93       	push	r17
    2abc:	cf 93       	push	r28
    2abe:	df 93       	push	r29
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
    2ac4:	ca 1b       	sub	r28, r26
    2ac6:	db 0b       	sbc	r29, r27
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	09 94       	ijmp

00002ad4 <__epilogue_restores__>:
    2ad4:	2a 88       	ldd	r2, Y+18	; 0x12
    2ad6:	39 88       	ldd	r3, Y+17	; 0x11
    2ad8:	48 88       	ldd	r4, Y+16	; 0x10
    2ada:	5f 84       	ldd	r5, Y+15	; 0x0f
    2adc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ade:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ae0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ae2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ae4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ae6:	b9 84       	ldd	r11, Y+9	; 0x09
    2ae8:	c8 84       	ldd	r12, Y+8	; 0x08
    2aea:	df 80       	ldd	r13, Y+7	; 0x07
    2aec:	ee 80       	ldd	r14, Y+6	; 0x06
    2aee:	fd 80       	ldd	r15, Y+5	; 0x05
    2af0:	0c 81       	ldd	r16, Y+4	; 0x04
    2af2:	1b 81       	ldd	r17, Y+3	; 0x03
    2af4:	aa 81       	ldd	r26, Y+2	; 0x02
    2af6:	b9 81       	ldd	r27, Y+1	; 0x01
    2af8:	ce 0f       	add	r28, r30
    2afa:	d1 1d       	adc	r29, r1
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	ed 01       	movw	r28, r26
    2b08:	08 95       	ret

00002b0a <_exit>:
    2b0a:	f8 94       	cli

00002b0c <__stop_program>:
    2b0c:	ff cf       	rjmp	.-2      	; 0x2b0c <__stop_program>
